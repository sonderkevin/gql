// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"

	"github.com/nrfta/go-paging"
)

type Calificacion struct {
	ID              string    `json:"id"`
	Estado          bool      `json:"estado"`
	Fechacreado     string    `json:"fechacreado"`
	Fechamodificado string    `json:"fechamodificado"`
	Calificacion    float64   `json:"calificacion"`
	Usuario         *User     `json:"usuario"`
	Producto        *Producto `json:"producto"`
}

type CalificacionNodeConnection struct {
	PageInfo *paging.PageInfo        `json:"pageInfo"`
	Edges    []*CalificacionNodeEdge `json:"edges"`
}

type CalificacionNodeEdge struct {
	Cursor string        `json:"cursor"`
	Node   *Calificacion `json:"node"`
}

type Categoria struct {
	ID              string         `json:"id"`
	Estado          bool           `json:"estado"`
	FechaCreado     string         `json:"fechaCreado"`
	FechaModificado string         `json:"fechaModificado"`
	CategoriaPadre  *Categoria     `json:"categoriaPadre"`
	TipoCategoria   *TipoCategoria `json:"tipoCategoria"`
	Descripcion     string         `json:"descripcion"`
	ImageDefault    string         `json:"imageDefault"`
	Descuento       int            `json:"descuento"`
	CodigoPais      *string        `json:"codigoPais"`
	CodigoLetra     *string        `json:"codigoLetra"`
}

type CategoriaInput struct {
	ID               *string `json:"id"`
	Descripcion      *string `json:"descripcion"`
	TipoCategoriaID  *string `json:"tipoCategoriaId"`
	CategoriaPadreID *string `json:"categoriaPadreId"`
	CodigoPais       *string `json:"codigoPais"`
	CodigoLetra      *string `json:"codigoLetra"`
}

type CategoriaNodeConnection struct {
	PageInfo *paging.PageInfo     `json:"pageInfo"`
	Edges    []*CategoriaNodeEdge `json:"edges"`
}

type CategoriaNodeEdge struct {
	Cursor string     `json:"cursor"`
	Node   *Categoria `json:"node"`
}

type Comentario struct {
	ID              string    `json:"id"`
	Estado          bool      `json:"estado"`
	FechaCreado     string    `json:"fechaCreado"`
	FechaModificado string    `json:"fechaModificado"`
	Cliente         *User     `json:"cliente"`
	Text            string    `json:"text"`
	Producto        *Producto `json:"producto"`
}

type ComentarioNodeConnection struct {
	PageInfo *paging.PageInfo      `json:"pageInfo"`
	Edges    []*ComentarioNodeEdge `json:"edges"`
}

type ComentarioNodeEdge struct {
	Cursor string      `json:"cursor"`
	Node   *Comentario `json:"node"`
}

type Compannia struct {
	ID              string                 `json:"id"`
	Estado          bool                   `json:"estado"`
	FechaCreado     string                 `json:"fechaCreado"`
	FechaModificado string                 `json:"fechaModificado"`
	UsuarioCreador  *User                  `json:"usuarioCreador"`
	Nombre          string                 `json:"nombre"`
	Pais            *Categoria             `json:"pais"`
	Empresas        *EmpresaNodeConnection `json:"empresas"`
	Usuarios        *UserNodeConnection    `json:"usuarios"`
}

type CompanniaNodeConnection struct {
	PageInfo *paging.PageInfo     `json:"pageInfo"`
	Edges    []*CompanniaNodeEdge `json:"edges"`
}

type CompanniaNodeEdge struct {
	Cursor string     `json:"cursor"`
	Node   *Compannia `json:"node"`
}

type Empresa struct {
	ID              string     `json:"id"`
	Estado          bool       `json:"estado"`
	Fechacreado     string     `json:"fechacreado"`
	Fechamodificado string     `json:"fechamodificado"`
	UsuarioCreador  *User      `json:"usuarioCreador"`
	Compania        *Compannia `json:"compania"`
	Nombre          string     `json:"nombre"`
	Tarjeta         string     `json:"tarjeta"`
	APagar          float64    `json:"aPagar"`
	Premium         bool       `json:"premium"`
	Categoria       *Categoria `json:"categoria"`
	Latitud         float64    `json:"latitud"`
	Longitud        float64    `json:"longitud"`
	Movil           bool       `json:"movil"`
	Urlweb          string     `json:"urlweb"`
	Referencia      *string    `json:"referencia"`
}

type EmpresaInput struct {
	ID        *string `json:"id"`
	Categoria *string `json:"categoria"`
	Nombre    *string `json:"nombre"`
}

type EmpresaNodeConnection struct {
	PageInfo *paging.PageInfo   `json:"pageInfo"`
	Edges    []*EmpresaNodeEdge `json:"edges"`
}

type EmpresaNodeEdge struct {
	Cursor string   `json:"cursor"`
	Node   *Empresa `json:"node"`
}

type Marca struct {
	ID              string                  `json:"id"`
	Estado          bool                    `json:"estado"`
	FechaCreado     string                  `json:"fechaCreado"`
	FechaModificado string                  `json:"fechaModificado"`
	UsuarioCreador  *User                   `json:"usuarioCreador"`
	Descripcion     string                  `json:"descripcion"`
	Productos       *ProductoNodeConnection `json:"productos"`
}

type NomencladorProducto struct {
	ID              string                           `json:"id"`
	Estado          bool                             `json:"estado"`
	FechaCreado     string                           `json:"fechaCreado"`
	FechaModificado string                           `json:"fechaModificado"`
	Tipo            string                           `json:"tipo"`
	Descripcion     string                           `json:"descripcion"`
	Categoria       *Categoria                       `json:"categoria"`
	Propiedades     *PropiedadProductoNodeConnection `json:"propiedades"`
	Productos       *ProductoNodeConnection          `json:"productos"`
}

type Producto struct {
	ID                  string                           `json:"id"`
	Estado              bool                             `json:"estado"`
	FechaCreado         string                           `json:"fechaCreado"`
	FechaModificado     string                           `json:"fechaModificado"`
	UsuarioCreador      *User                            `json:"usuarioCreador"`
	PrecioCompra        float64                          `json:"precioCompra"`
	PrecioVenta         float64                          `json:"precioVenta"`
	Cantidad            int                              `json:"cantidad"`
	Descuento           int                              `json:"descuento"`
	Lote                bool                             `json:"lote"`
	Latitud             float64                          `json:"latitud"`
	Longitud            float64                          `json:"longitud"`
	Visible             bool                             `json:"visible"`
	Descripcion         *NomencladorProducto             `json:"descripcion"`
	DescripcionCompleta *string                          `json:"descripcionCompleta"`
	Empresa             *Empresa                         `json:"empresa"`
	Marca               *Marca                           `json:"marca"`
	Codigo              *string                          `json:"codigo"`
	Destacado           *int                             `json:"destacado"`
	Usuarios            *UserNodeConnection              `json:"usuarios"`
	Calificaciones      *CalificacionNodeConnection      `json:"calificaciones"`
	PropiedadesValores  *PropiedadProductoNodeConnection `json:"propiedadesValores"`
	Comentarios         *ComentarioNodeConnection        `json:"comentarios"`
}

type ProductoInput struct {
	Descripcion *string `json:"descripcion"`
	Categoria   *string `json:"categoria"`
	Empresa     *string `json:"empresa"`
	Marca       *string `json:"marca"`
	Destacado   *int    `json:"destacado"`
}

type ProductoNodeConnection struct {
	PageInfo *paging.PageInfo    `json:"pageInfo"`
	Edges    []*ProductoNodeEdge `json:"edges"`
}

type ProductoNodeEdge struct {
	Cursor string    `json:"cursor"`
	Node   *Producto `json:"node"`
}

type PropiedadProducto struct {
	ID              string                `json:"id"`
	Estado          bool                  `json:"estado"`
	FechaCreado     string                `json:"fechaCreado"`
	FechaModificado string                `json:"fechaModificado"`
	UsuarioCreador  *string               `json:"usuarioCreador"`
	Tipo            PropiedadProductoTipo `json:"tipo"`
	Descripcion     string                `json:"descripcion"`
}

type PropiedadProductoNodeConnection struct {
	PageInfo *paging.PageInfo             `json:"pageInfo"`
	Edges    []*PropiedadProductoNodeEdge `json:"edges"`
}

type PropiedadProductoNodeEdge struct {
	Cursor string             `json:"cursor"`
	Node   *PropiedadProducto `json:"node"`
}

type TipoCategoria struct {
	ID              string  `json:"id"`
	Estado          bool    `json:"estado"`
	Fechacreado     string  `json:"fechacreado"`
	Fechamodificado string  `json:"fechamodificado"`
	Nombre          string  `json:"nombre"`
	Abrev           string  `json:"abrev"`
	Sub             *string `json:"sub"`
}

type User struct {
	ID        string `json:"id"`
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
}

type UserNodeConnection struct {
	PageInfo *paging.PageInfo `json:"pageInfo"`
	Edges    []*UserNodeEdge  `json:"edges"`
}

type UserNodeEdge struct {
	Cursor string `json:"cursor"`
	Node   *User  `json:"node"`
}

type PropiedadProductoTipo string

const (
	PropiedadProductoTipoProducto PropiedadProductoTipo = "PRODUCTO"
	PropiedadProductoTipoServicio PropiedadProductoTipo = "SERVICIO"
)

var AllPropiedadProductoTipo = []PropiedadProductoTipo{
	PropiedadProductoTipoProducto,
	PropiedadProductoTipoServicio,
}

func (e PropiedadProductoTipo) IsValid() bool {
	switch e {
	case PropiedadProductoTipoProducto, PropiedadProductoTipoServicio:
		return true
	}
	return false
}

func (e PropiedadProductoTipo) String() string {
	return string(e)
}

func (e *PropiedadProductoTipo) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PropiedadProductoTipo(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PropiedadProductoTipo", str)
	}
	return nil
}

func (e PropiedadProductoTipo) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
