// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/nrfta/go-paging"
	"github.com/sonderkevin/gql/graph/model"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	PageInfo() PageInfoResolver
	Query() QueryResolver
	PageArgs() PageArgsResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Calificacion struct {
		Calificacion    func(childComplexity int) int
		Estado          func(childComplexity int) int
		Fechacreado     func(childComplexity int) int
		Fechamodificado func(childComplexity int) int
		ID              func(childComplexity int) int
		Producto        func(childComplexity int) int
		Usuario         func(childComplexity int) int
	}

	CalificacionNodeConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	CalificacionNodeEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Categoria struct {
		CategoriaPadre  func(childComplexity int) int
		CodigoLetra     func(childComplexity int) int
		CodigoPais      func(childComplexity int) int
		Descripcion     func(childComplexity int) int
		Descuento       func(childComplexity int) int
		Estado          func(childComplexity int) int
		FechaCreado     func(childComplexity int) int
		FechaModificado func(childComplexity int) int
		ID              func(childComplexity int) int
		ImageDefault    func(childComplexity int) int
		TipoCategoria   func(childComplexity int) int
	}

	CategoriaNodeConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	CategoriaNodeEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Comentario struct {
		Cliente         func(childComplexity int) int
		Estado          func(childComplexity int) int
		FechaCreado     func(childComplexity int) int
		FechaModificado func(childComplexity int) int
		ID              func(childComplexity int) int
		Producto        func(childComplexity int) int
		Text            func(childComplexity int) int
	}

	ComentarioNodeConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	ComentarioNodeEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Compannia struct {
		Empresas        func(childComplexity int, page *paging.PageArgs, input *model.EmpresaInput) int
		Estado          func(childComplexity int) int
		FechaCreado     func(childComplexity int) int
		FechaModificado func(childComplexity int) int
		ID              func(childComplexity int) int
		Nombre          func(childComplexity int) int
		Pais            func(childComplexity int) int
		UsuarioCreador  func(childComplexity int) int
		Usuarios        func(childComplexity int, page *paging.PageArgs) int
	}

	CompanniaNodeConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	CompanniaNodeEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Empresa struct {
		APagar          func(childComplexity int) int
		Categoria       func(childComplexity int) int
		Compania        func(childComplexity int) int
		Estado          func(childComplexity int) int
		Fechacreado     func(childComplexity int) int
		Fechamodificado func(childComplexity int) int
		ID              func(childComplexity int) int
		Latitud         func(childComplexity int) int
		Longitud        func(childComplexity int) int
		Movil           func(childComplexity int) int
		Nombre          func(childComplexity int) int
		Premium         func(childComplexity int) int
		Referencia      func(childComplexity int) int
		Tarjeta         func(childComplexity int) int
		Urlweb          func(childComplexity int) int
		UsuarioCreador  func(childComplexity int) int
	}

	EmpresaNodeConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	EmpresaNodeEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Marca struct {
		Descripcion     func(childComplexity int) int
		Estado          func(childComplexity int) int
		FechaCreado     func(childComplexity int) int
		FechaModificado func(childComplexity int) int
		ID              func(childComplexity int) int
		Productos       func(childComplexity int, page *paging.PageArgs, input *model.ProductoInput) int
		UsuarioCreador  func(childComplexity int) int
	}

	NomencladorProducto struct {
		Categoria       func(childComplexity int) int
		Descripcion     func(childComplexity int) int
		Estado          func(childComplexity int) int
		FechaCreado     func(childComplexity int) int
		FechaModificado func(childComplexity int) int
		ID              func(childComplexity int) int
		Productos       func(childComplexity int, page *paging.PageArgs, input *model.ProductoInput) int
		Propiedades     func(childComplexity int, page *paging.PageArgs) int
		Tipo            func(childComplexity int) int
	}

	PageInfo struct {
		EndCursor       func(childComplexity int) int
		HasNextPage     func(childComplexity int) int
		HasPreviousPage func(childComplexity int) int
		StartCursor     func(childComplexity int) int
		TotalCount      func(childComplexity int) int
	}

	Producto struct {
		Calificaciones      func(childComplexity int) int
		Cantidad            func(childComplexity int) int
		Codigo              func(childComplexity int) int
		Comentarios         func(childComplexity int, page *paging.PageArgs) int
		Descripcion         func(childComplexity int) int
		DescripcionCompleta func(childComplexity int) int
		Descuento           func(childComplexity int) int
		Destacado           func(childComplexity int) int
		Empresa             func(childComplexity int) int
		Estado              func(childComplexity int) int
		FechaCreado         func(childComplexity int) int
		FechaModificado     func(childComplexity int) int
		ID                  func(childComplexity int) int
		Latitud             func(childComplexity int) int
		Longitud            func(childComplexity int) int
		Lote                func(childComplexity int) int
		Marca               func(childComplexity int) int
		PrecioCompra        func(childComplexity int) int
		PrecioVenta         func(childComplexity int) int
		PropiedadesValores  func(childComplexity int, page *paging.PageArgs) int
		UsuarioCreador      func(childComplexity int) int
		Usuarios            func(childComplexity int) int
		Visible             func(childComplexity int) int
	}

	ProductoNodeConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	ProductoNodeEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	PropiedadProducto struct {
		Descripcion     func(childComplexity int) int
		Estado          func(childComplexity int) int
		FechaCreado     func(childComplexity int) int
		FechaModificado func(childComplexity int) int
		ID              func(childComplexity int) int
		Tipo            func(childComplexity int) int
		UsuarioCreador  func(childComplexity int) int
	}

	PropiedadProductoNodeConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	PropiedadProductoNodeEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Query struct {
		Categoria  func(childComplexity int, id string) int
		Categorias func(childComplexity int, page *paging.PageArgs, input *model.CategoriaInput) int
		Producto   func(childComplexity int, id string) int
		Productos  func(childComplexity int, page *paging.PageArgs, input *model.ProductoInput) int
		Users      func(childComplexity int, page *paging.PageArgs) int
	}

	TipoCategoria struct {
		Abrev           func(childComplexity int) int
		Estado          func(childComplexity int) int
		Fechacreado     func(childComplexity int) int
		Fechamodificado func(childComplexity int) int
		ID              func(childComplexity int) int
		Nombre          func(childComplexity int) int
		Sub             func(childComplexity int) int
	}

	User struct {
		FirstName func(childComplexity int) int
		ID        func(childComplexity int) int
		LastName  func(childComplexity int) int
	}

	UserNodeConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	UserNodeEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}
}

type PageInfoResolver interface {
	HasPreviousPage(ctx context.Context, obj *paging.PageInfo) (bool, error)
	HasNextPage(ctx context.Context, obj *paging.PageInfo) (bool, error)
	TotalCount(ctx context.Context, obj *paging.PageInfo) (*int, error)
	StartCursor(ctx context.Context, obj *paging.PageInfo) (*string, error)
	EndCursor(ctx context.Context, obj *paging.PageInfo) (*string, error)
}
type QueryResolver interface {
	Users(ctx context.Context, page *paging.PageArgs) (*model.UserNodeConnection, error)
	Categoria(ctx context.Context, id string) (*model.Categoria, error)
	Categorias(ctx context.Context, page *paging.PageArgs, input *model.CategoriaInput) (*model.CategoriaNodeConnection, error)
	Producto(ctx context.Context, id string) (*model.Producto, error)
	Productos(ctx context.Context, page *paging.PageArgs, input *model.ProductoInput) (*model.ProductoNodeConnection, error)
}

type PageArgsResolver interface {
	Last(ctx context.Context, obj *paging.PageArgs, data *int) error
	Before(ctx context.Context, obj *paging.PageArgs, data *string) error
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Calificacion.calificacion":
		if e.complexity.Calificacion.Calificacion == nil {
			break
		}

		return e.complexity.Calificacion.Calificacion(childComplexity), true

	case "Calificacion.estado":
		if e.complexity.Calificacion.Estado == nil {
			break
		}

		return e.complexity.Calificacion.Estado(childComplexity), true

	case "Calificacion.fechacreado":
		if e.complexity.Calificacion.Fechacreado == nil {
			break
		}

		return e.complexity.Calificacion.Fechacreado(childComplexity), true

	case "Calificacion.fechamodificado":
		if e.complexity.Calificacion.Fechamodificado == nil {
			break
		}

		return e.complexity.Calificacion.Fechamodificado(childComplexity), true

	case "Calificacion.id":
		if e.complexity.Calificacion.ID == nil {
			break
		}

		return e.complexity.Calificacion.ID(childComplexity), true

	case "Calificacion.producto":
		if e.complexity.Calificacion.Producto == nil {
			break
		}

		return e.complexity.Calificacion.Producto(childComplexity), true

	case "Calificacion.usuario":
		if e.complexity.Calificacion.Usuario == nil {
			break
		}

		return e.complexity.Calificacion.Usuario(childComplexity), true

	case "CalificacionNodeConnection.edges":
		if e.complexity.CalificacionNodeConnection.Edges == nil {
			break
		}

		return e.complexity.CalificacionNodeConnection.Edges(childComplexity), true

	case "CalificacionNodeConnection.pageInfo":
		if e.complexity.CalificacionNodeConnection.PageInfo == nil {
			break
		}

		return e.complexity.CalificacionNodeConnection.PageInfo(childComplexity), true

	case "CalificacionNodeEdge.cursor":
		if e.complexity.CalificacionNodeEdge.Cursor == nil {
			break
		}

		return e.complexity.CalificacionNodeEdge.Cursor(childComplexity), true

	case "CalificacionNodeEdge.node":
		if e.complexity.CalificacionNodeEdge.Node == nil {
			break
		}

		return e.complexity.CalificacionNodeEdge.Node(childComplexity), true

	case "Categoria.categoriaPadre":
		if e.complexity.Categoria.CategoriaPadre == nil {
			break
		}

		return e.complexity.Categoria.CategoriaPadre(childComplexity), true

	case "Categoria.codigoLetra":
		if e.complexity.Categoria.CodigoLetra == nil {
			break
		}

		return e.complexity.Categoria.CodigoLetra(childComplexity), true

	case "Categoria.codigoPais":
		if e.complexity.Categoria.CodigoPais == nil {
			break
		}

		return e.complexity.Categoria.CodigoPais(childComplexity), true

	case "Categoria.descripcion":
		if e.complexity.Categoria.Descripcion == nil {
			break
		}

		return e.complexity.Categoria.Descripcion(childComplexity), true

	case "Categoria.descuento":
		if e.complexity.Categoria.Descuento == nil {
			break
		}

		return e.complexity.Categoria.Descuento(childComplexity), true

	case "Categoria.estado":
		if e.complexity.Categoria.Estado == nil {
			break
		}

		return e.complexity.Categoria.Estado(childComplexity), true

	case "Categoria.fechaCreado":
		if e.complexity.Categoria.FechaCreado == nil {
			break
		}

		return e.complexity.Categoria.FechaCreado(childComplexity), true

	case "Categoria.fechaModificado":
		if e.complexity.Categoria.FechaModificado == nil {
			break
		}

		return e.complexity.Categoria.FechaModificado(childComplexity), true

	case "Categoria.id":
		if e.complexity.Categoria.ID == nil {
			break
		}

		return e.complexity.Categoria.ID(childComplexity), true

	case "Categoria.imageDefault":
		if e.complexity.Categoria.ImageDefault == nil {
			break
		}

		return e.complexity.Categoria.ImageDefault(childComplexity), true

	case "Categoria.tipoCategoria":
		if e.complexity.Categoria.TipoCategoria == nil {
			break
		}

		return e.complexity.Categoria.TipoCategoria(childComplexity), true

	case "CategoriaNodeConnection.edges":
		if e.complexity.CategoriaNodeConnection.Edges == nil {
			break
		}

		return e.complexity.CategoriaNodeConnection.Edges(childComplexity), true

	case "CategoriaNodeConnection.pageInfo":
		if e.complexity.CategoriaNodeConnection.PageInfo == nil {
			break
		}

		return e.complexity.CategoriaNodeConnection.PageInfo(childComplexity), true

	case "CategoriaNodeEdge.cursor":
		if e.complexity.CategoriaNodeEdge.Cursor == nil {
			break
		}

		return e.complexity.CategoriaNodeEdge.Cursor(childComplexity), true

	case "CategoriaNodeEdge.node":
		if e.complexity.CategoriaNodeEdge.Node == nil {
			break
		}

		return e.complexity.CategoriaNodeEdge.Node(childComplexity), true

	case "Comentario.cliente":
		if e.complexity.Comentario.Cliente == nil {
			break
		}

		return e.complexity.Comentario.Cliente(childComplexity), true

	case "Comentario.estado":
		if e.complexity.Comentario.Estado == nil {
			break
		}

		return e.complexity.Comentario.Estado(childComplexity), true

	case "Comentario.fechaCreado":
		if e.complexity.Comentario.FechaCreado == nil {
			break
		}

		return e.complexity.Comentario.FechaCreado(childComplexity), true

	case "Comentario.fechaModificado":
		if e.complexity.Comentario.FechaModificado == nil {
			break
		}

		return e.complexity.Comentario.FechaModificado(childComplexity), true

	case "Comentario.id":
		if e.complexity.Comentario.ID == nil {
			break
		}

		return e.complexity.Comentario.ID(childComplexity), true

	case "Comentario.producto":
		if e.complexity.Comentario.Producto == nil {
			break
		}

		return e.complexity.Comentario.Producto(childComplexity), true

	case "Comentario.text":
		if e.complexity.Comentario.Text == nil {
			break
		}

		return e.complexity.Comentario.Text(childComplexity), true

	case "ComentarioNodeConnection.edges":
		if e.complexity.ComentarioNodeConnection.Edges == nil {
			break
		}

		return e.complexity.ComentarioNodeConnection.Edges(childComplexity), true

	case "ComentarioNodeConnection.pageInfo":
		if e.complexity.ComentarioNodeConnection.PageInfo == nil {
			break
		}

		return e.complexity.ComentarioNodeConnection.PageInfo(childComplexity), true

	case "ComentarioNodeEdge.cursor":
		if e.complexity.ComentarioNodeEdge.Cursor == nil {
			break
		}

		return e.complexity.ComentarioNodeEdge.Cursor(childComplexity), true

	case "ComentarioNodeEdge.node":
		if e.complexity.ComentarioNodeEdge.Node == nil {
			break
		}

		return e.complexity.ComentarioNodeEdge.Node(childComplexity), true

	case "Compannia.empresas":
		if e.complexity.Compannia.Empresas == nil {
			break
		}

		args, err := ec.field_Compannia_empresas_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Compannia.Empresas(childComplexity, args["page"].(*paging.PageArgs), args["input"].(*model.EmpresaInput)), true

	case "Compannia.estado":
		if e.complexity.Compannia.Estado == nil {
			break
		}

		return e.complexity.Compannia.Estado(childComplexity), true

	case "Compannia.fechaCreado":
		if e.complexity.Compannia.FechaCreado == nil {
			break
		}

		return e.complexity.Compannia.FechaCreado(childComplexity), true

	case "Compannia.fechaModificado":
		if e.complexity.Compannia.FechaModificado == nil {
			break
		}

		return e.complexity.Compannia.FechaModificado(childComplexity), true

	case "Compannia.id":
		if e.complexity.Compannia.ID == nil {
			break
		}

		return e.complexity.Compannia.ID(childComplexity), true

	case "Compannia.nombre":
		if e.complexity.Compannia.Nombre == nil {
			break
		}

		return e.complexity.Compannia.Nombre(childComplexity), true

	case "Compannia.pais":
		if e.complexity.Compannia.Pais == nil {
			break
		}

		return e.complexity.Compannia.Pais(childComplexity), true

	case "Compannia.usuarioCreador":
		if e.complexity.Compannia.UsuarioCreador == nil {
			break
		}

		return e.complexity.Compannia.UsuarioCreador(childComplexity), true

	case "Compannia.usuarios":
		if e.complexity.Compannia.Usuarios == nil {
			break
		}

		args, err := ec.field_Compannia_usuarios_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Compannia.Usuarios(childComplexity, args["page"].(*paging.PageArgs)), true

	case "CompanniaNodeConnection.edges":
		if e.complexity.CompanniaNodeConnection.Edges == nil {
			break
		}

		return e.complexity.CompanniaNodeConnection.Edges(childComplexity), true

	case "CompanniaNodeConnection.pageInfo":
		if e.complexity.CompanniaNodeConnection.PageInfo == nil {
			break
		}

		return e.complexity.CompanniaNodeConnection.PageInfo(childComplexity), true

	case "CompanniaNodeEdge.cursor":
		if e.complexity.CompanniaNodeEdge.Cursor == nil {
			break
		}

		return e.complexity.CompanniaNodeEdge.Cursor(childComplexity), true

	case "CompanniaNodeEdge.node":
		if e.complexity.CompanniaNodeEdge.Node == nil {
			break
		}

		return e.complexity.CompanniaNodeEdge.Node(childComplexity), true

	case "Empresa.aPagar":
		if e.complexity.Empresa.APagar == nil {
			break
		}

		return e.complexity.Empresa.APagar(childComplexity), true

	case "Empresa.categoria":
		if e.complexity.Empresa.Categoria == nil {
			break
		}

		return e.complexity.Empresa.Categoria(childComplexity), true

	case "Empresa.compania":
		if e.complexity.Empresa.Compania == nil {
			break
		}

		return e.complexity.Empresa.Compania(childComplexity), true

	case "Empresa.estado":
		if e.complexity.Empresa.Estado == nil {
			break
		}

		return e.complexity.Empresa.Estado(childComplexity), true

	case "Empresa.fechacreado":
		if e.complexity.Empresa.Fechacreado == nil {
			break
		}

		return e.complexity.Empresa.Fechacreado(childComplexity), true

	case "Empresa.fechamodificado":
		if e.complexity.Empresa.Fechamodificado == nil {
			break
		}

		return e.complexity.Empresa.Fechamodificado(childComplexity), true

	case "Empresa.id":
		if e.complexity.Empresa.ID == nil {
			break
		}

		return e.complexity.Empresa.ID(childComplexity), true

	case "Empresa.latitud":
		if e.complexity.Empresa.Latitud == nil {
			break
		}

		return e.complexity.Empresa.Latitud(childComplexity), true

	case "Empresa.longitud":
		if e.complexity.Empresa.Longitud == nil {
			break
		}

		return e.complexity.Empresa.Longitud(childComplexity), true

	case "Empresa.movil":
		if e.complexity.Empresa.Movil == nil {
			break
		}

		return e.complexity.Empresa.Movil(childComplexity), true

	case "Empresa.nombre":
		if e.complexity.Empresa.Nombre == nil {
			break
		}

		return e.complexity.Empresa.Nombre(childComplexity), true

	case "Empresa.premium":
		if e.complexity.Empresa.Premium == nil {
			break
		}

		return e.complexity.Empresa.Premium(childComplexity), true

	case "Empresa.referencia":
		if e.complexity.Empresa.Referencia == nil {
			break
		}

		return e.complexity.Empresa.Referencia(childComplexity), true

	case "Empresa.tarjeta":
		if e.complexity.Empresa.Tarjeta == nil {
			break
		}

		return e.complexity.Empresa.Tarjeta(childComplexity), true

	case "Empresa.urlweb":
		if e.complexity.Empresa.Urlweb == nil {
			break
		}

		return e.complexity.Empresa.Urlweb(childComplexity), true

	case "Empresa.usuarioCreador":
		if e.complexity.Empresa.UsuarioCreador == nil {
			break
		}

		return e.complexity.Empresa.UsuarioCreador(childComplexity), true

	case "EmpresaNodeConnection.edges":
		if e.complexity.EmpresaNodeConnection.Edges == nil {
			break
		}

		return e.complexity.EmpresaNodeConnection.Edges(childComplexity), true

	case "EmpresaNodeConnection.pageInfo":
		if e.complexity.EmpresaNodeConnection.PageInfo == nil {
			break
		}

		return e.complexity.EmpresaNodeConnection.PageInfo(childComplexity), true

	case "EmpresaNodeEdge.cursor":
		if e.complexity.EmpresaNodeEdge.Cursor == nil {
			break
		}

		return e.complexity.EmpresaNodeEdge.Cursor(childComplexity), true

	case "EmpresaNodeEdge.node":
		if e.complexity.EmpresaNodeEdge.Node == nil {
			break
		}

		return e.complexity.EmpresaNodeEdge.Node(childComplexity), true

	case "Marca.descripcion":
		if e.complexity.Marca.Descripcion == nil {
			break
		}

		return e.complexity.Marca.Descripcion(childComplexity), true

	case "Marca.estado":
		if e.complexity.Marca.Estado == nil {
			break
		}

		return e.complexity.Marca.Estado(childComplexity), true

	case "Marca.fechaCreado":
		if e.complexity.Marca.FechaCreado == nil {
			break
		}

		return e.complexity.Marca.FechaCreado(childComplexity), true

	case "Marca.fechaModificado":
		if e.complexity.Marca.FechaModificado == nil {
			break
		}

		return e.complexity.Marca.FechaModificado(childComplexity), true

	case "Marca.id":
		if e.complexity.Marca.ID == nil {
			break
		}

		return e.complexity.Marca.ID(childComplexity), true

	case "Marca.productos":
		if e.complexity.Marca.Productos == nil {
			break
		}

		args, err := ec.field_Marca_productos_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Marca.Productos(childComplexity, args["page"].(*paging.PageArgs), args["input"].(*model.ProductoInput)), true

	case "Marca.usuarioCreador":
		if e.complexity.Marca.UsuarioCreador == nil {
			break
		}

		return e.complexity.Marca.UsuarioCreador(childComplexity), true

	case "NomencladorProducto.categoria":
		if e.complexity.NomencladorProducto.Categoria == nil {
			break
		}

		return e.complexity.NomencladorProducto.Categoria(childComplexity), true

	case "NomencladorProducto.descripcion":
		if e.complexity.NomencladorProducto.Descripcion == nil {
			break
		}

		return e.complexity.NomencladorProducto.Descripcion(childComplexity), true

	case "NomencladorProducto.estado":
		if e.complexity.NomencladorProducto.Estado == nil {
			break
		}

		return e.complexity.NomencladorProducto.Estado(childComplexity), true

	case "NomencladorProducto.fechaCreado":
		if e.complexity.NomencladorProducto.FechaCreado == nil {
			break
		}

		return e.complexity.NomencladorProducto.FechaCreado(childComplexity), true

	case "NomencladorProducto.fechaModificado":
		if e.complexity.NomencladorProducto.FechaModificado == nil {
			break
		}

		return e.complexity.NomencladorProducto.FechaModificado(childComplexity), true

	case "NomencladorProducto.id":
		if e.complexity.NomencladorProducto.ID == nil {
			break
		}

		return e.complexity.NomencladorProducto.ID(childComplexity), true

	case "NomencladorProducto.productos":
		if e.complexity.NomencladorProducto.Productos == nil {
			break
		}

		args, err := ec.field_NomencladorProducto_productos_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.NomencladorProducto.Productos(childComplexity, args["page"].(*paging.PageArgs), args["input"].(*model.ProductoInput)), true

	case "NomencladorProducto.propiedades":
		if e.complexity.NomencladorProducto.Propiedades == nil {
			break
		}

		args, err := ec.field_NomencladorProducto_propiedades_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.NomencladorProducto.Propiedades(childComplexity, args["page"].(*paging.PageArgs)), true

	case "NomencladorProducto.tipo":
		if e.complexity.NomencladorProducto.Tipo == nil {
			break
		}

		return e.complexity.NomencladorProducto.Tipo(childComplexity), true

	case "PageInfo.endCursor":
		if e.complexity.PageInfo.EndCursor == nil {
			break
		}

		return e.complexity.PageInfo.EndCursor(childComplexity), true

	case "PageInfo.hasNextPage":
		if e.complexity.PageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.PageInfo.HasNextPage(childComplexity), true

	case "PageInfo.hasPreviousPage":
		if e.complexity.PageInfo.HasPreviousPage == nil {
			break
		}

		return e.complexity.PageInfo.HasPreviousPage(childComplexity), true

	case "PageInfo.startCursor":
		if e.complexity.PageInfo.StartCursor == nil {
			break
		}

		return e.complexity.PageInfo.StartCursor(childComplexity), true

	case "PageInfo.totalCount":
		if e.complexity.PageInfo.TotalCount == nil {
			break
		}

		return e.complexity.PageInfo.TotalCount(childComplexity), true

	case "Producto.calificaciones":
		if e.complexity.Producto.Calificaciones == nil {
			break
		}

		return e.complexity.Producto.Calificaciones(childComplexity), true

	case "Producto.cantidad":
		if e.complexity.Producto.Cantidad == nil {
			break
		}

		return e.complexity.Producto.Cantidad(childComplexity), true

	case "Producto.codigo":
		if e.complexity.Producto.Codigo == nil {
			break
		}

		return e.complexity.Producto.Codigo(childComplexity), true

	case "Producto.comentarios":
		if e.complexity.Producto.Comentarios == nil {
			break
		}

		args, err := ec.field_Producto_comentarios_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Producto.Comentarios(childComplexity, args["page"].(*paging.PageArgs)), true

	case "Producto.descripcion":
		if e.complexity.Producto.Descripcion == nil {
			break
		}

		return e.complexity.Producto.Descripcion(childComplexity), true

	case "Producto.descripcionCompleta":
		if e.complexity.Producto.DescripcionCompleta == nil {
			break
		}

		return e.complexity.Producto.DescripcionCompleta(childComplexity), true

	case "Producto.descuento":
		if e.complexity.Producto.Descuento == nil {
			break
		}

		return e.complexity.Producto.Descuento(childComplexity), true

	case "Producto.destacado":
		if e.complexity.Producto.Destacado == nil {
			break
		}

		return e.complexity.Producto.Destacado(childComplexity), true

	case "Producto.empresa":
		if e.complexity.Producto.Empresa == nil {
			break
		}

		return e.complexity.Producto.Empresa(childComplexity), true

	case "Producto.estado":
		if e.complexity.Producto.Estado == nil {
			break
		}

		return e.complexity.Producto.Estado(childComplexity), true

	case "Producto.fechaCreado":
		if e.complexity.Producto.FechaCreado == nil {
			break
		}

		return e.complexity.Producto.FechaCreado(childComplexity), true

	case "Producto.fechaModificado":
		if e.complexity.Producto.FechaModificado == nil {
			break
		}

		return e.complexity.Producto.FechaModificado(childComplexity), true

	case "Producto.id":
		if e.complexity.Producto.ID == nil {
			break
		}

		return e.complexity.Producto.ID(childComplexity), true

	case "Producto.latitud":
		if e.complexity.Producto.Latitud == nil {
			break
		}

		return e.complexity.Producto.Latitud(childComplexity), true

	case "Producto.longitud":
		if e.complexity.Producto.Longitud == nil {
			break
		}

		return e.complexity.Producto.Longitud(childComplexity), true

	case "Producto.lote":
		if e.complexity.Producto.Lote == nil {
			break
		}

		return e.complexity.Producto.Lote(childComplexity), true

	case "Producto.marca":
		if e.complexity.Producto.Marca == nil {
			break
		}

		return e.complexity.Producto.Marca(childComplexity), true

	case "Producto.precioCompra":
		if e.complexity.Producto.PrecioCompra == nil {
			break
		}

		return e.complexity.Producto.PrecioCompra(childComplexity), true

	case "Producto.precioVenta":
		if e.complexity.Producto.PrecioVenta == nil {
			break
		}

		return e.complexity.Producto.PrecioVenta(childComplexity), true

	case "Producto.propiedadesValores":
		if e.complexity.Producto.PropiedadesValores == nil {
			break
		}

		args, err := ec.field_Producto_propiedadesValores_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Producto.PropiedadesValores(childComplexity, args["page"].(*paging.PageArgs)), true

	case "Producto.usuarioCreador":
		if e.complexity.Producto.UsuarioCreador == nil {
			break
		}

		return e.complexity.Producto.UsuarioCreador(childComplexity), true

	case "Producto.usuarios":
		if e.complexity.Producto.Usuarios == nil {
			break
		}

		return e.complexity.Producto.Usuarios(childComplexity), true

	case "Producto.visible":
		if e.complexity.Producto.Visible == nil {
			break
		}

		return e.complexity.Producto.Visible(childComplexity), true

	case "ProductoNodeConnection.edges":
		if e.complexity.ProductoNodeConnection.Edges == nil {
			break
		}

		return e.complexity.ProductoNodeConnection.Edges(childComplexity), true

	case "ProductoNodeConnection.pageInfo":
		if e.complexity.ProductoNodeConnection.PageInfo == nil {
			break
		}

		return e.complexity.ProductoNodeConnection.PageInfo(childComplexity), true

	case "ProductoNodeEdge.cursor":
		if e.complexity.ProductoNodeEdge.Cursor == nil {
			break
		}

		return e.complexity.ProductoNodeEdge.Cursor(childComplexity), true

	case "ProductoNodeEdge.node":
		if e.complexity.ProductoNodeEdge.Node == nil {
			break
		}

		return e.complexity.ProductoNodeEdge.Node(childComplexity), true

	case "PropiedadProducto.descripcion":
		if e.complexity.PropiedadProducto.Descripcion == nil {
			break
		}

		return e.complexity.PropiedadProducto.Descripcion(childComplexity), true

	case "PropiedadProducto.estado":
		if e.complexity.PropiedadProducto.Estado == nil {
			break
		}

		return e.complexity.PropiedadProducto.Estado(childComplexity), true

	case "PropiedadProducto.fechaCreado":
		if e.complexity.PropiedadProducto.FechaCreado == nil {
			break
		}

		return e.complexity.PropiedadProducto.FechaCreado(childComplexity), true

	case "PropiedadProducto.fechaModificado":
		if e.complexity.PropiedadProducto.FechaModificado == nil {
			break
		}

		return e.complexity.PropiedadProducto.FechaModificado(childComplexity), true

	case "PropiedadProducto.id":
		if e.complexity.PropiedadProducto.ID == nil {
			break
		}

		return e.complexity.PropiedadProducto.ID(childComplexity), true

	case "PropiedadProducto.tipo":
		if e.complexity.PropiedadProducto.Tipo == nil {
			break
		}

		return e.complexity.PropiedadProducto.Tipo(childComplexity), true

	case "PropiedadProducto.usuarioCreador":
		if e.complexity.PropiedadProducto.UsuarioCreador == nil {
			break
		}

		return e.complexity.PropiedadProducto.UsuarioCreador(childComplexity), true

	case "PropiedadProductoNodeConnection.edges":
		if e.complexity.PropiedadProductoNodeConnection.Edges == nil {
			break
		}

		return e.complexity.PropiedadProductoNodeConnection.Edges(childComplexity), true

	case "PropiedadProductoNodeConnection.pageInfo":
		if e.complexity.PropiedadProductoNodeConnection.PageInfo == nil {
			break
		}

		return e.complexity.PropiedadProductoNodeConnection.PageInfo(childComplexity), true

	case "PropiedadProductoNodeEdge.cursor":
		if e.complexity.PropiedadProductoNodeEdge.Cursor == nil {
			break
		}

		return e.complexity.PropiedadProductoNodeEdge.Cursor(childComplexity), true

	case "PropiedadProductoNodeEdge.node":
		if e.complexity.PropiedadProductoNodeEdge.Node == nil {
			break
		}

		return e.complexity.PropiedadProductoNodeEdge.Node(childComplexity), true

	case "Query.categoria":
		if e.complexity.Query.Categoria == nil {
			break
		}

		args, err := ec.field_Query_categoria_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Categoria(childComplexity, args["id"].(string)), true

	case "Query.categorias":
		if e.complexity.Query.Categorias == nil {
			break
		}

		args, err := ec.field_Query_categorias_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Categorias(childComplexity, args["page"].(*paging.PageArgs), args["input"].(*model.CategoriaInput)), true

	case "Query.producto":
		if e.complexity.Query.Producto == nil {
			break
		}

		args, err := ec.field_Query_producto_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Producto(childComplexity, args["id"].(string)), true

	case "Query.productos":
		if e.complexity.Query.Productos == nil {
			break
		}

		args, err := ec.field_Query_productos_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Productos(childComplexity, args["page"].(*paging.PageArgs), args["input"].(*model.ProductoInput)), true

	case "Query.users":
		if e.complexity.Query.Users == nil {
			break
		}

		args, err := ec.field_Query_users_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Users(childComplexity, args["page"].(*paging.PageArgs)), true

	case "TipoCategoria.abrev":
		if e.complexity.TipoCategoria.Abrev == nil {
			break
		}

		return e.complexity.TipoCategoria.Abrev(childComplexity), true

	case "TipoCategoria.estado":
		if e.complexity.TipoCategoria.Estado == nil {
			break
		}

		return e.complexity.TipoCategoria.Estado(childComplexity), true

	case "TipoCategoria.fechacreado":
		if e.complexity.TipoCategoria.Fechacreado == nil {
			break
		}

		return e.complexity.TipoCategoria.Fechacreado(childComplexity), true

	case "TipoCategoria.fechamodificado":
		if e.complexity.TipoCategoria.Fechamodificado == nil {
			break
		}

		return e.complexity.TipoCategoria.Fechamodificado(childComplexity), true

	case "TipoCategoria.id":
		if e.complexity.TipoCategoria.ID == nil {
			break
		}

		return e.complexity.TipoCategoria.ID(childComplexity), true

	case "TipoCategoria.nombre":
		if e.complexity.TipoCategoria.Nombre == nil {
			break
		}

		return e.complexity.TipoCategoria.Nombre(childComplexity), true

	case "TipoCategoria.sub":
		if e.complexity.TipoCategoria.Sub == nil {
			break
		}

		return e.complexity.TipoCategoria.Sub(childComplexity), true

	case "User.firstName":
		if e.complexity.User.FirstName == nil {
			break
		}

		return e.complexity.User.FirstName(childComplexity), true

	case "User.id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.lastName":
		if e.complexity.User.LastName == nil {
			break
		}

		return e.complexity.User.LastName(childComplexity), true

	case "UserNodeConnection.edges":
		if e.complexity.UserNodeConnection.Edges == nil {
			break
		}

		return e.complexity.UserNodeConnection.Edges(childComplexity), true

	case "UserNodeConnection.pageInfo":
		if e.complexity.UserNodeConnection.PageInfo == nil {
			break
		}

		return e.complexity.UserNodeConnection.PageInfo(childComplexity), true

	case "UserNodeEdge.cursor":
		if e.complexity.UserNodeEdge.Cursor == nil {
			break
		}

		return e.complexity.UserNodeEdge.Cursor(childComplexity), true

	case "UserNodeEdge.node":
		if e.complexity.UserNodeEdge.Node == nil {
			break
		}

		return e.complexity.UserNodeEdge.Node(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputCategoriaInput,
		ec.unmarshalInputEmpresaInput,
		ec.unmarshalInputPageArgs,
		ec.unmarshalInputProductoInput,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../schema/calificacion.schema.graphql", Input: `type Calificacion {
  id: ID!
  estado: Boolean!
  fechacreado: DateTime!
  fechamodificado: DateTime!
  calificacion: Float!
  usuario: User!
  producto: Producto!
}

type CalificacionNodeConnection {
  pageInfo: PageInfo!
  edges: [CalificacionNodeEdge]
}

type CalificacionNodeEdge {
  cursor: String!
  node: Calificacion
}`, BuiltIn: false},
	{Name: "../schema/categoria.schema.graphql", Input: `type Categoria {
  id: ID!
  estado: Boolean!
  fechaCreado: DateTime!
  fechaModificado: DateTime!
  categoriaPadre: Categoria
  tipoCategoria: TipoCategoria!
  descripcion: String!
  imageDefault: String!
  descuento: Int!
  codigoPais: String
  codigoLetra: String
}

input CategoriaInput {
  id: ID
  descripcion: String
  tipoCategoriaId: ID
  categoriaPadreId: ID
  codigoPais: String
  codigoLetra: String
}

type CategoriaNodeConnection {
  pageInfo: PageInfo!
  edges: [CategoriaNodeEdge]!
}

type CategoriaNodeEdge {
  cursor: String!
  node: Categoria
}
`, BuiltIn: false},
	{Name: "../schema/comentario.schema.graphql", Input: `type Comentario {
  id: ID!
  estado: Boolean!
  fechaCreado: DateTime!
  fechaModificado: DateTime!
  cliente: User!
  text: String!
  producto: Producto!
}

type ComentarioNodeConnection {
  pageInfo: PageInfo!
  edges: [ComentarioNodeEdge]
}

type ComentarioNodeEdge {
  cursor: String!
  node: Comentario
}`, BuiltIn: false},
	{Name: "../schema/compannia.schema.graphql", Input: `type Compannia {
  id: ID!
  estado: Boolean!
  fechaCreado: DateTime!
  fechaModificado: DateTime!
  usuarioCreador: User
  nombre: String!
  pais: Categoria!
  empresas(page: PageArgs, input: EmpresaInput): EmpresaNodeConnection!
  usuarios(page: PageArgs): UserNodeConnection!
}

type CompanniaNodeConnection {
  pageInfo: PageInfo!
  edges: [CompanniaNodeEdge]!
}

type CompanniaNodeEdge {
  cursor: String!
  node: Compannia
}
`, BuiltIn: false},
	{Name: "../schema/empresa.schema.graphql", Input: `type Empresa {
  id: ID!
  estado: Boolean!
  fechacreado: DateTime!
  fechamodificado: DateTime!
  usuarioCreador: User
  compania: Compannia!
  nombre: String!
  tarjeta: String!
  aPagar: Float!
  premium: Boolean!
#   barrio: BarrioNode!
  categoria: Categoria!
  latitud: Float!
  longitud: Float!
  movil: Boolean!
  urlweb: String!
  referencia: String
#   empresaFavorito: [XUserType!]!
#   productoSet(page: PageArgs, input: ProductoSetInput): ProductoNodeConnection!
#   servicioSet(page: PageArgs, input: ServicioSetInput): ServicioNodeConnection!
#   articleSet(page: PageArgs, input: ArticleSetInput): ArticleNodeConnection!
#   personSet(page: PageArgs, input: PersonSetInput): PersonNodeConnection!
#   images(page: PageArgs): ImageNodeConnection!
#   facturaencSet(page: PageArgs): FacturaEncNodeConnection!
#   comentarioempresaSet(page: PageArgs): ComentarioEmpresaNodeConnection!
#   feriaEmp(page: PageArgs, nombre: String): FeriaNodeConnection!
#   empresasConfig(page: PageArgs): ConfigAplicadaNodeConnection!
#   count: Int
}

type EmpresaNodeConnection {
  pageInfo: PageInfo!
  edges: [EmpresaNodeEdge]!
}

type EmpresaNodeEdge {
  cursor: String!
  node: Empresa
}

input EmpresaInput {
  id: ID
  categoria: ID
  nombre: String
}

# input ArticleInput {
#   title: String
#   content: String
#   business: ID
# }

# input PersonInput {
#   firstName: String
#   lastName: String
# }
`, BuiltIn: false},
	{Name: "../schema/marca.schema.graphql", Input: `type Marca {
  id: ID!
  estado: Boolean!
  fechaCreado: DateTime!
  fechaModificado: DateTime!
  usuarioCreador: User
  descripcion: String!
  productos(page: PageArgs, input: ProductoInput): ProductoNodeConnection!
}`, BuiltIn: false},
	{Name: "../schema/nomencladorProducto.schema.graphql", Input: `type NomencladorProducto {
  id: ID!
  estado: Boolean!
  fechaCreado: DateTime!
  fechaModificado: DateTime!
  tipo: String!
  descripcion: String!
  categoria: Categoria
  propiedades(page: PageArgs): PropiedadProductoNodeConnection!
  productos(page: PageArgs, input: ProductoInput): ProductoNodeConnection!
}`, BuiltIn: false},
	{Name: "../schema/product.schema.graphql", Input: `type Producto {
  id: ID!
  estado: Boolean!
  fechaCreado: DateTime!
  fechaModificado: DateTime!

  usuarioCreador: User!
  precioCompra: Float!
  precioVenta: Float!
  cantidad: Int!
  descuento: Int!
  lote: Boolean!
  latitud: Float!
  longitud: Float!
  visible: Boolean!
  
  descripcion: NomencladorProducto!
  descripcionCompleta: String

  empresa: Empresa!
  marca: Marca
  
  codigo: String
  destacado: Int

  usuarios: UserNodeConnection!
  calificaciones: CalificacionNodeConnection!

  propiedadesValores(page: PageArgs): PropiedadProductoNodeConnection!
  # imagenes(page: PageArgs): ImagenNodeConnection!
  comentarios(page: PageArgs): ComentarioNodeConnection!
}

type ProductoNodeConnection {
  pageInfo: PageInfo!
  edges: [ProductoNodeEdge]!
}

type ProductoNodeEdge {
  cursor: String!
  node: Producto
}

input ProductoInput {
  descripcion: String
  categoria: ID
  empresa: ID
  marca: ID
  destacado: Int
}
`, BuiltIn: false},
	{Name: "../schema/propiedadProducto.schema.graphql", Input: `type PropiedadProducto {
  id: ID!
  estado: Boolean!
  fechaCreado: DateTime!
  fechaModificado: DateTime!

  usuarioCreador: String
  tipo: PropiedadProductoTipo!
  descripcion: String!
  # categorias(page: PageArgs, descripcion: String, descripcion_Icontains: String): SubCategoriaNodeConnection!
  # propiedadprodvalorSet(page: PageArgs): PropiedadProdValorNodeConnection!
  # nomencladorproductoSet(page: PageArgs, descripcion: String, descripcion_Icontains: String, subcategoria: ID, subcategoria_Descripcion: String, subcategoria_Descripcion_Icontains: String, tipo: String): NomProductoNodeConnection!
}

type PropiedadProductoNodeConnection {
  pageInfo: PageInfo!
  edges: [PropiedadProductoNodeEdge]!
}

type PropiedadProductoNodeEdge {
  cursor: String!
  node: PropiedadProducto
}

enum PropiedadProductoTipo {
  PRODUCTO
  SERVICIO
}
`, BuiltIn: false},
	{Name: "../schema/schema.graphql", Input: `scalar DateTime

type Query {
  users(page: PageArgs): UserNodeConnection!
  categoria(id: ID!): Categoria
  categorias(page: PageArgs, input: CategoriaInput): CategoriaNodeConnection
  producto(id: ID!): Producto
  productos(page: PageArgs, input: ProductoInput): ProductoNodeConnection
}

input PageArgs {
  first: Int
  last: Int
  before: String
  after: String
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  totalCount: Int
  startCursor: String
  endCursor: String
}
`, BuiltIn: false},
	{Name: "../schema/tipoCategoria.schema.graphql", Input: `type TipoCategoria {
  id: ID!
  estado: Boolean!
  fechacreado: DateTime!
  fechamodificado: DateTime!
  nombre: String!
  abrev: String!
  sub: String
}`, BuiltIn: false},
	{Name: "../schema/user.schema.graphql", Input: `type User {
  id: ID!
  firstName: String!
  lastName: String!
}

type UserNodeConnection {
  pageInfo: PageInfo!
  edges: [UserNodeEdge]
}

type UserNodeEdge {
  cursor: String!
  node: User
}`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Compannia_empresas_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *paging.PageArgs
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg0, err = ec.unmarshalOPageArgs2ᚖgithubᚗcomᚋnrftaᚋgoᚑpagingᚐPageArgs(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	var arg1 *model.EmpresaInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalOEmpresaInput2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐEmpresaInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Compannia_usuarios_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *paging.PageArgs
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg0, err = ec.unmarshalOPageArgs2ᚖgithubᚗcomᚋnrftaᚋgoᚑpagingᚐPageArgs(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	return args, nil
}

func (ec *executionContext) field_Marca_productos_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *paging.PageArgs
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg0, err = ec.unmarshalOPageArgs2ᚖgithubᚗcomᚋnrftaᚋgoᚑpagingᚐPageArgs(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	var arg1 *model.ProductoInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalOProductoInput2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐProductoInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_NomencladorProducto_productos_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *paging.PageArgs
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg0, err = ec.unmarshalOPageArgs2ᚖgithubᚗcomᚋnrftaᚋgoᚑpagingᚐPageArgs(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	var arg1 *model.ProductoInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalOProductoInput2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐProductoInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_NomencladorProducto_propiedades_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *paging.PageArgs
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg0, err = ec.unmarshalOPageArgs2ᚖgithubᚗcomᚋnrftaᚋgoᚑpagingᚐPageArgs(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	return args, nil
}

func (ec *executionContext) field_Producto_comentarios_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *paging.PageArgs
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg0, err = ec.unmarshalOPageArgs2ᚖgithubᚗcomᚋnrftaᚋgoᚑpagingᚐPageArgs(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	return args, nil
}

func (ec *executionContext) field_Producto_propiedadesValores_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *paging.PageArgs
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg0, err = ec.unmarshalOPageArgs2ᚖgithubᚗcomᚋnrftaᚋgoᚑpagingᚐPageArgs(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_categoria_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_categorias_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *paging.PageArgs
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg0, err = ec.unmarshalOPageArgs2ᚖgithubᚗcomᚋnrftaᚋgoᚑpagingᚐPageArgs(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	var arg1 *model.CategoriaInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalOCategoriaInput2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐCategoriaInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_producto_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_productos_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *paging.PageArgs
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg0, err = ec.unmarshalOPageArgs2ᚖgithubᚗcomᚋnrftaᚋgoᚑpagingᚐPageArgs(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	var arg1 *model.ProductoInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalOProductoInput2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐProductoInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_users_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *paging.PageArgs
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg0, err = ec.unmarshalOPageArgs2ᚖgithubᚗcomᚋnrftaᚋgoᚑpagingᚐPageArgs(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Calificacion_id(ctx context.Context, field graphql.CollectedField, obj *model.Calificacion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Calificacion_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Calificacion_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Calificacion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Calificacion_estado(ctx context.Context, field graphql.CollectedField, obj *model.Calificacion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Calificacion_estado(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Estado, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Calificacion_estado(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Calificacion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Calificacion_fechacreado(ctx context.Context, field graphql.CollectedField, obj *model.Calificacion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Calificacion_fechacreado(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fechacreado, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Calificacion_fechacreado(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Calificacion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Calificacion_fechamodificado(ctx context.Context, field graphql.CollectedField, obj *model.Calificacion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Calificacion_fechamodificado(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fechamodificado, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Calificacion_fechamodificado(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Calificacion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Calificacion_calificacion(ctx context.Context, field graphql.CollectedField, obj *model.Calificacion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Calificacion_calificacion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Calificacion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Calificacion_calificacion(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Calificacion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Calificacion_usuario(ctx context.Context, field graphql.CollectedField, obj *model.Calificacion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Calificacion_usuario(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Usuario, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Calificacion_usuario(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Calificacion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Calificacion_producto(ctx context.Context, field graphql.CollectedField, obj *model.Calificacion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Calificacion_producto(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Producto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Producto)
	fc.Result = res
	return ec.marshalNProducto2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐProducto(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Calificacion_producto(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Calificacion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Producto_id(ctx, field)
			case "estado":
				return ec.fieldContext_Producto_estado(ctx, field)
			case "fechaCreado":
				return ec.fieldContext_Producto_fechaCreado(ctx, field)
			case "fechaModificado":
				return ec.fieldContext_Producto_fechaModificado(ctx, field)
			case "usuarioCreador":
				return ec.fieldContext_Producto_usuarioCreador(ctx, field)
			case "precioCompra":
				return ec.fieldContext_Producto_precioCompra(ctx, field)
			case "precioVenta":
				return ec.fieldContext_Producto_precioVenta(ctx, field)
			case "cantidad":
				return ec.fieldContext_Producto_cantidad(ctx, field)
			case "descuento":
				return ec.fieldContext_Producto_descuento(ctx, field)
			case "lote":
				return ec.fieldContext_Producto_lote(ctx, field)
			case "latitud":
				return ec.fieldContext_Producto_latitud(ctx, field)
			case "longitud":
				return ec.fieldContext_Producto_longitud(ctx, field)
			case "visible":
				return ec.fieldContext_Producto_visible(ctx, field)
			case "descripcion":
				return ec.fieldContext_Producto_descripcion(ctx, field)
			case "descripcionCompleta":
				return ec.fieldContext_Producto_descripcionCompleta(ctx, field)
			case "empresa":
				return ec.fieldContext_Producto_empresa(ctx, field)
			case "marca":
				return ec.fieldContext_Producto_marca(ctx, field)
			case "codigo":
				return ec.fieldContext_Producto_codigo(ctx, field)
			case "destacado":
				return ec.fieldContext_Producto_destacado(ctx, field)
			case "usuarios":
				return ec.fieldContext_Producto_usuarios(ctx, field)
			case "calificaciones":
				return ec.fieldContext_Producto_calificaciones(ctx, field)
			case "propiedadesValores":
				return ec.fieldContext_Producto_propiedadesValores(ctx, field)
			case "comentarios":
				return ec.fieldContext_Producto_comentarios(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Producto", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CalificacionNodeConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.CalificacionNodeConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CalificacionNodeConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*paging.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋnrftaᚋgoᚑpagingᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CalificacionNodeConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CalificacionNodeConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "totalCount":
				return ec.fieldContext_PageInfo_totalCount(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CalificacionNodeConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.CalificacionNodeConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CalificacionNodeConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.CalificacionNodeEdge)
	fc.Result = res
	return ec.marshalOCalificacionNodeEdge2ᚕᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐCalificacionNodeEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CalificacionNodeConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CalificacionNodeConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_CalificacionNodeEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_CalificacionNodeEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CalificacionNodeEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CalificacionNodeEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.CalificacionNodeEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CalificacionNodeEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CalificacionNodeEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CalificacionNodeEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CalificacionNodeEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.CalificacionNodeEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CalificacionNodeEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Calificacion)
	fc.Result = res
	return ec.marshalOCalificacion2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐCalificacion(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CalificacionNodeEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CalificacionNodeEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Calificacion_id(ctx, field)
			case "estado":
				return ec.fieldContext_Calificacion_estado(ctx, field)
			case "fechacreado":
				return ec.fieldContext_Calificacion_fechacreado(ctx, field)
			case "fechamodificado":
				return ec.fieldContext_Calificacion_fechamodificado(ctx, field)
			case "calificacion":
				return ec.fieldContext_Calificacion_calificacion(ctx, field)
			case "usuario":
				return ec.fieldContext_Calificacion_usuario(ctx, field)
			case "producto":
				return ec.fieldContext_Calificacion_producto(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Calificacion", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Categoria_id(ctx context.Context, field graphql.CollectedField, obj *model.Categoria) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Categoria_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Categoria_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Categoria",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Categoria_estado(ctx context.Context, field graphql.CollectedField, obj *model.Categoria) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Categoria_estado(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Estado, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Categoria_estado(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Categoria",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Categoria_fechaCreado(ctx context.Context, field graphql.CollectedField, obj *model.Categoria) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Categoria_fechaCreado(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FechaCreado, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Categoria_fechaCreado(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Categoria",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Categoria_fechaModificado(ctx context.Context, field graphql.CollectedField, obj *model.Categoria) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Categoria_fechaModificado(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FechaModificado, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Categoria_fechaModificado(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Categoria",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Categoria_categoriaPadre(ctx context.Context, field graphql.CollectedField, obj *model.Categoria) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Categoria_categoriaPadre(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CategoriaPadre, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Categoria)
	fc.Result = res
	return ec.marshalOCategoria2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐCategoria(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Categoria_categoriaPadre(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Categoria",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Categoria_id(ctx, field)
			case "estado":
				return ec.fieldContext_Categoria_estado(ctx, field)
			case "fechaCreado":
				return ec.fieldContext_Categoria_fechaCreado(ctx, field)
			case "fechaModificado":
				return ec.fieldContext_Categoria_fechaModificado(ctx, field)
			case "categoriaPadre":
				return ec.fieldContext_Categoria_categoriaPadre(ctx, field)
			case "tipoCategoria":
				return ec.fieldContext_Categoria_tipoCategoria(ctx, field)
			case "descripcion":
				return ec.fieldContext_Categoria_descripcion(ctx, field)
			case "imageDefault":
				return ec.fieldContext_Categoria_imageDefault(ctx, field)
			case "descuento":
				return ec.fieldContext_Categoria_descuento(ctx, field)
			case "codigoPais":
				return ec.fieldContext_Categoria_codigoPais(ctx, field)
			case "codigoLetra":
				return ec.fieldContext_Categoria_codigoLetra(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Categoria", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Categoria_tipoCategoria(ctx context.Context, field graphql.CollectedField, obj *model.Categoria) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Categoria_tipoCategoria(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TipoCategoria, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.TipoCategoria)
	fc.Result = res
	return ec.marshalNTipoCategoria2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐTipoCategoria(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Categoria_tipoCategoria(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Categoria",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TipoCategoria_id(ctx, field)
			case "estado":
				return ec.fieldContext_TipoCategoria_estado(ctx, field)
			case "fechacreado":
				return ec.fieldContext_TipoCategoria_fechacreado(ctx, field)
			case "fechamodificado":
				return ec.fieldContext_TipoCategoria_fechamodificado(ctx, field)
			case "nombre":
				return ec.fieldContext_TipoCategoria_nombre(ctx, field)
			case "abrev":
				return ec.fieldContext_TipoCategoria_abrev(ctx, field)
			case "sub":
				return ec.fieldContext_TipoCategoria_sub(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TipoCategoria", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Categoria_descripcion(ctx context.Context, field graphql.CollectedField, obj *model.Categoria) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Categoria_descripcion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Descripcion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Categoria_descripcion(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Categoria",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Categoria_imageDefault(ctx context.Context, field graphql.CollectedField, obj *model.Categoria) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Categoria_imageDefault(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImageDefault, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Categoria_imageDefault(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Categoria",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Categoria_descuento(ctx context.Context, field graphql.CollectedField, obj *model.Categoria) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Categoria_descuento(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Descuento, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Categoria_descuento(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Categoria",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Categoria_codigoPais(ctx context.Context, field graphql.CollectedField, obj *model.Categoria) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Categoria_codigoPais(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CodigoPais, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Categoria_codigoPais(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Categoria",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Categoria_codigoLetra(ctx context.Context, field graphql.CollectedField, obj *model.Categoria) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Categoria_codigoLetra(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CodigoLetra, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Categoria_codigoLetra(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Categoria",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CategoriaNodeConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.CategoriaNodeConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CategoriaNodeConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*paging.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋnrftaᚋgoᚑpagingᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CategoriaNodeConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CategoriaNodeConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "totalCount":
				return ec.fieldContext_PageInfo_totalCount(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CategoriaNodeConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.CategoriaNodeConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CategoriaNodeConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CategoriaNodeEdge)
	fc.Result = res
	return ec.marshalNCategoriaNodeEdge2ᚕᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐCategoriaNodeEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CategoriaNodeConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CategoriaNodeConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_CategoriaNodeEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_CategoriaNodeEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CategoriaNodeEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CategoriaNodeEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.CategoriaNodeEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CategoriaNodeEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CategoriaNodeEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CategoriaNodeEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CategoriaNodeEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.CategoriaNodeEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CategoriaNodeEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Categoria)
	fc.Result = res
	return ec.marshalOCategoria2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐCategoria(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CategoriaNodeEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CategoriaNodeEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Categoria_id(ctx, field)
			case "estado":
				return ec.fieldContext_Categoria_estado(ctx, field)
			case "fechaCreado":
				return ec.fieldContext_Categoria_fechaCreado(ctx, field)
			case "fechaModificado":
				return ec.fieldContext_Categoria_fechaModificado(ctx, field)
			case "categoriaPadre":
				return ec.fieldContext_Categoria_categoriaPadre(ctx, field)
			case "tipoCategoria":
				return ec.fieldContext_Categoria_tipoCategoria(ctx, field)
			case "descripcion":
				return ec.fieldContext_Categoria_descripcion(ctx, field)
			case "imageDefault":
				return ec.fieldContext_Categoria_imageDefault(ctx, field)
			case "descuento":
				return ec.fieldContext_Categoria_descuento(ctx, field)
			case "codigoPais":
				return ec.fieldContext_Categoria_codigoPais(ctx, field)
			case "codigoLetra":
				return ec.fieldContext_Categoria_codigoLetra(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Categoria", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Comentario_id(ctx context.Context, field graphql.CollectedField, obj *model.Comentario) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Comentario_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Comentario_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Comentario",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Comentario_estado(ctx context.Context, field graphql.CollectedField, obj *model.Comentario) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Comentario_estado(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Estado, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Comentario_estado(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Comentario",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Comentario_fechaCreado(ctx context.Context, field graphql.CollectedField, obj *model.Comentario) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Comentario_fechaCreado(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FechaCreado, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Comentario_fechaCreado(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Comentario",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Comentario_fechaModificado(ctx context.Context, field graphql.CollectedField, obj *model.Comentario) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Comentario_fechaModificado(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FechaModificado, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Comentario_fechaModificado(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Comentario",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Comentario_cliente(ctx context.Context, field graphql.CollectedField, obj *model.Comentario) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Comentario_cliente(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cliente, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Comentario_cliente(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Comentario",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Comentario_text(ctx context.Context, field graphql.CollectedField, obj *model.Comentario) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Comentario_text(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Comentario_text(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Comentario",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Comentario_producto(ctx context.Context, field graphql.CollectedField, obj *model.Comentario) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Comentario_producto(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Producto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Producto)
	fc.Result = res
	return ec.marshalNProducto2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐProducto(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Comentario_producto(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Comentario",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Producto_id(ctx, field)
			case "estado":
				return ec.fieldContext_Producto_estado(ctx, field)
			case "fechaCreado":
				return ec.fieldContext_Producto_fechaCreado(ctx, field)
			case "fechaModificado":
				return ec.fieldContext_Producto_fechaModificado(ctx, field)
			case "usuarioCreador":
				return ec.fieldContext_Producto_usuarioCreador(ctx, field)
			case "precioCompra":
				return ec.fieldContext_Producto_precioCompra(ctx, field)
			case "precioVenta":
				return ec.fieldContext_Producto_precioVenta(ctx, field)
			case "cantidad":
				return ec.fieldContext_Producto_cantidad(ctx, field)
			case "descuento":
				return ec.fieldContext_Producto_descuento(ctx, field)
			case "lote":
				return ec.fieldContext_Producto_lote(ctx, field)
			case "latitud":
				return ec.fieldContext_Producto_latitud(ctx, field)
			case "longitud":
				return ec.fieldContext_Producto_longitud(ctx, field)
			case "visible":
				return ec.fieldContext_Producto_visible(ctx, field)
			case "descripcion":
				return ec.fieldContext_Producto_descripcion(ctx, field)
			case "descripcionCompleta":
				return ec.fieldContext_Producto_descripcionCompleta(ctx, field)
			case "empresa":
				return ec.fieldContext_Producto_empresa(ctx, field)
			case "marca":
				return ec.fieldContext_Producto_marca(ctx, field)
			case "codigo":
				return ec.fieldContext_Producto_codigo(ctx, field)
			case "destacado":
				return ec.fieldContext_Producto_destacado(ctx, field)
			case "usuarios":
				return ec.fieldContext_Producto_usuarios(ctx, field)
			case "calificaciones":
				return ec.fieldContext_Producto_calificaciones(ctx, field)
			case "propiedadesValores":
				return ec.fieldContext_Producto_propiedadesValores(ctx, field)
			case "comentarios":
				return ec.fieldContext_Producto_comentarios(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Producto", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComentarioNodeConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.ComentarioNodeConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComentarioNodeConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*paging.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋnrftaᚋgoᚑpagingᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComentarioNodeConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComentarioNodeConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "totalCount":
				return ec.fieldContext_PageInfo_totalCount(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComentarioNodeConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.ComentarioNodeConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComentarioNodeConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ComentarioNodeEdge)
	fc.Result = res
	return ec.marshalOComentarioNodeEdge2ᚕᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐComentarioNodeEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComentarioNodeConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComentarioNodeConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_ComentarioNodeEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_ComentarioNodeEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ComentarioNodeEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComentarioNodeEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.ComentarioNodeEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComentarioNodeEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComentarioNodeEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComentarioNodeEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComentarioNodeEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.ComentarioNodeEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComentarioNodeEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Comentario)
	fc.Result = res
	return ec.marshalOComentario2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐComentario(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComentarioNodeEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComentarioNodeEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Comentario_id(ctx, field)
			case "estado":
				return ec.fieldContext_Comentario_estado(ctx, field)
			case "fechaCreado":
				return ec.fieldContext_Comentario_fechaCreado(ctx, field)
			case "fechaModificado":
				return ec.fieldContext_Comentario_fechaModificado(ctx, field)
			case "cliente":
				return ec.fieldContext_Comentario_cliente(ctx, field)
			case "text":
				return ec.fieldContext_Comentario_text(ctx, field)
			case "producto":
				return ec.fieldContext_Comentario_producto(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Comentario", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Compannia_id(ctx context.Context, field graphql.CollectedField, obj *model.Compannia) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Compannia_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Compannia_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Compannia",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Compannia_estado(ctx context.Context, field graphql.CollectedField, obj *model.Compannia) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Compannia_estado(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Estado, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Compannia_estado(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Compannia",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Compannia_fechaCreado(ctx context.Context, field graphql.CollectedField, obj *model.Compannia) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Compannia_fechaCreado(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FechaCreado, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Compannia_fechaCreado(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Compannia",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Compannia_fechaModificado(ctx context.Context, field graphql.CollectedField, obj *model.Compannia) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Compannia_fechaModificado(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FechaModificado, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Compannia_fechaModificado(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Compannia",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Compannia_usuarioCreador(ctx context.Context, field graphql.CollectedField, obj *model.Compannia) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Compannia_usuarioCreador(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UsuarioCreador, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Compannia_usuarioCreador(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Compannia",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Compannia_nombre(ctx context.Context, field graphql.CollectedField, obj *model.Compannia) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Compannia_nombre(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nombre, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Compannia_nombre(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Compannia",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Compannia_pais(ctx context.Context, field graphql.CollectedField, obj *model.Compannia) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Compannia_pais(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pais, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Categoria)
	fc.Result = res
	return ec.marshalNCategoria2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐCategoria(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Compannia_pais(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Compannia",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Categoria_id(ctx, field)
			case "estado":
				return ec.fieldContext_Categoria_estado(ctx, field)
			case "fechaCreado":
				return ec.fieldContext_Categoria_fechaCreado(ctx, field)
			case "fechaModificado":
				return ec.fieldContext_Categoria_fechaModificado(ctx, field)
			case "categoriaPadre":
				return ec.fieldContext_Categoria_categoriaPadre(ctx, field)
			case "tipoCategoria":
				return ec.fieldContext_Categoria_tipoCategoria(ctx, field)
			case "descripcion":
				return ec.fieldContext_Categoria_descripcion(ctx, field)
			case "imageDefault":
				return ec.fieldContext_Categoria_imageDefault(ctx, field)
			case "descuento":
				return ec.fieldContext_Categoria_descuento(ctx, field)
			case "codigoPais":
				return ec.fieldContext_Categoria_codigoPais(ctx, field)
			case "codigoLetra":
				return ec.fieldContext_Categoria_codigoLetra(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Categoria", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Compannia_empresas(ctx context.Context, field graphql.CollectedField, obj *model.Compannia) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Compannia_empresas(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Empresas, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.EmpresaNodeConnection)
	fc.Result = res
	return ec.marshalNEmpresaNodeConnection2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐEmpresaNodeConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Compannia_empresas(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Compannia",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "pageInfo":
				return ec.fieldContext_EmpresaNodeConnection_pageInfo(ctx, field)
			case "edges":
				return ec.fieldContext_EmpresaNodeConnection_edges(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EmpresaNodeConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Compannia_empresas_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Compannia_usuarios(ctx context.Context, field graphql.CollectedField, obj *model.Compannia) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Compannia_usuarios(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Usuarios, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.UserNodeConnection)
	fc.Result = res
	return ec.marshalNUserNodeConnection2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐUserNodeConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Compannia_usuarios(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Compannia",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "pageInfo":
				return ec.fieldContext_UserNodeConnection_pageInfo(ctx, field)
			case "edges":
				return ec.fieldContext_UserNodeConnection_edges(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserNodeConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Compannia_usuarios_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _CompanniaNodeConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.CompanniaNodeConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanniaNodeConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*paging.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋnrftaᚋgoᚑpagingᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanniaNodeConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanniaNodeConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "totalCount":
				return ec.fieldContext_PageInfo_totalCount(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanniaNodeConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.CompanniaNodeConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanniaNodeConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CompanniaNodeEdge)
	fc.Result = res
	return ec.marshalNCompanniaNodeEdge2ᚕᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐCompanniaNodeEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanniaNodeConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanniaNodeConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_CompanniaNodeEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_CompanniaNodeEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CompanniaNodeEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanniaNodeEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.CompanniaNodeEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanniaNodeEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanniaNodeEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanniaNodeEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanniaNodeEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.CompanniaNodeEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanniaNodeEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Compannia)
	fc.Result = res
	return ec.marshalOCompannia2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐCompannia(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanniaNodeEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanniaNodeEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Compannia_id(ctx, field)
			case "estado":
				return ec.fieldContext_Compannia_estado(ctx, field)
			case "fechaCreado":
				return ec.fieldContext_Compannia_fechaCreado(ctx, field)
			case "fechaModificado":
				return ec.fieldContext_Compannia_fechaModificado(ctx, field)
			case "usuarioCreador":
				return ec.fieldContext_Compannia_usuarioCreador(ctx, field)
			case "nombre":
				return ec.fieldContext_Compannia_nombre(ctx, field)
			case "pais":
				return ec.fieldContext_Compannia_pais(ctx, field)
			case "empresas":
				return ec.fieldContext_Compannia_empresas(ctx, field)
			case "usuarios":
				return ec.fieldContext_Compannia_usuarios(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Compannia", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Empresa_id(ctx context.Context, field graphql.CollectedField, obj *model.Empresa) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Empresa_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Empresa_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Empresa",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Empresa_estado(ctx context.Context, field graphql.CollectedField, obj *model.Empresa) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Empresa_estado(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Estado, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Empresa_estado(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Empresa",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Empresa_fechacreado(ctx context.Context, field graphql.CollectedField, obj *model.Empresa) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Empresa_fechacreado(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fechacreado, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Empresa_fechacreado(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Empresa",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Empresa_fechamodificado(ctx context.Context, field graphql.CollectedField, obj *model.Empresa) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Empresa_fechamodificado(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fechamodificado, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Empresa_fechamodificado(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Empresa",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Empresa_usuarioCreador(ctx context.Context, field graphql.CollectedField, obj *model.Empresa) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Empresa_usuarioCreador(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UsuarioCreador, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Empresa_usuarioCreador(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Empresa",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Empresa_compania(ctx context.Context, field graphql.CollectedField, obj *model.Empresa) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Empresa_compania(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Compania, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Compannia)
	fc.Result = res
	return ec.marshalNCompannia2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐCompannia(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Empresa_compania(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Empresa",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Compannia_id(ctx, field)
			case "estado":
				return ec.fieldContext_Compannia_estado(ctx, field)
			case "fechaCreado":
				return ec.fieldContext_Compannia_fechaCreado(ctx, field)
			case "fechaModificado":
				return ec.fieldContext_Compannia_fechaModificado(ctx, field)
			case "usuarioCreador":
				return ec.fieldContext_Compannia_usuarioCreador(ctx, field)
			case "nombre":
				return ec.fieldContext_Compannia_nombre(ctx, field)
			case "pais":
				return ec.fieldContext_Compannia_pais(ctx, field)
			case "empresas":
				return ec.fieldContext_Compannia_empresas(ctx, field)
			case "usuarios":
				return ec.fieldContext_Compannia_usuarios(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Compannia", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Empresa_nombre(ctx context.Context, field graphql.CollectedField, obj *model.Empresa) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Empresa_nombre(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nombre, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Empresa_nombre(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Empresa",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Empresa_tarjeta(ctx context.Context, field graphql.CollectedField, obj *model.Empresa) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Empresa_tarjeta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tarjeta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Empresa_tarjeta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Empresa",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Empresa_aPagar(ctx context.Context, field graphql.CollectedField, obj *model.Empresa) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Empresa_aPagar(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.APagar, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Empresa_aPagar(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Empresa",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Empresa_premium(ctx context.Context, field graphql.CollectedField, obj *model.Empresa) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Empresa_premium(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Premium, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Empresa_premium(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Empresa",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Empresa_categoria(ctx context.Context, field graphql.CollectedField, obj *model.Empresa) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Empresa_categoria(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Categoria, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Categoria)
	fc.Result = res
	return ec.marshalNCategoria2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐCategoria(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Empresa_categoria(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Empresa",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Categoria_id(ctx, field)
			case "estado":
				return ec.fieldContext_Categoria_estado(ctx, field)
			case "fechaCreado":
				return ec.fieldContext_Categoria_fechaCreado(ctx, field)
			case "fechaModificado":
				return ec.fieldContext_Categoria_fechaModificado(ctx, field)
			case "categoriaPadre":
				return ec.fieldContext_Categoria_categoriaPadre(ctx, field)
			case "tipoCategoria":
				return ec.fieldContext_Categoria_tipoCategoria(ctx, field)
			case "descripcion":
				return ec.fieldContext_Categoria_descripcion(ctx, field)
			case "imageDefault":
				return ec.fieldContext_Categoria_imageDefault(ctx, field)
			case "descuento":
				return ec.fieldContext_Categoria_descuento(ctx, field)
			case "codigoPais":
				return ec.fieldContext_Categoria_codigoPais(ctx, field)
			case "codigoLetra":
				return ec.fieldContext_Categoria_codigoLetra(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Categoria", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Empresa_latitud(ctx context.Context, field graphql.CollectedField, obj *model.Empresa) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Empresa_latitud(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Latitud, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Empresa_latitud(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Empresa",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Empresa_longitud(ctx context.Context, field graphql.CollectedField, obj *model.Empresa) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Empresa_longitud(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Longitud, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Empresa_longitud(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Empresa",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Empresa_movil(ctx context.Context, field graphql.CollectedField, obj *model.Empresa) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Empresa_movil(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Movil, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Empresa_movil(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Empresa",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Empresa_urlweb(ctx context.Context, field graphql.CollectedField, obj *model.Empresa) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Empresa_urlweb(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Urlweb, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Empresa_urlweb(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Empresa",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Empresa_referencia(ctx context.Context, field graphql.CollectedField, obj *model.Empresa) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Empresa_referencia(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Referencia, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Empresa_referencia(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Empresa",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmpresaNodeConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.EmpresaNodeConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmpresaNodeConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*paging.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋnrftaᚋgoᚑpagingᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmpresaNodeConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmpresaNodeConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "totalCount":
				return ec.fieldContext_PageInfo_totalCount(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmpresaNodeConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.EmpresaNodeConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmpresaNodeConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.EmpresaNodeEdge)
	fc.Result = res
	return ec.marshalNEmpresaNodeEdge2ᚕᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐEmpresaNodeEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmpresaNodeConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmpresaNodeConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_EmpresaNodeEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_EmpresaNodeEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EmpresaNodeEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmpresaNodeEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.EmpresaNodeEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmpresaNodeEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmpresaNodeEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmpresaNodeEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmpresaNodeEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.EmpresaNodeEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmpresaNodeEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empresa)
	fc.Result = res
	return ec.marshalOEmpresa2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐEmpresa(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmpresaNodeEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmpresaNodeEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Empresa_id(ctx, field)
			case "estado":
				return ec.fieldContext_Empresa_estado(ctx, field)
			case "fechacreado":
				return ec.fieldContext_Empresa_fechacreado(ctx, field)
			case "fechamodificado":
				return ec.fieldContext_Empresa_fechamodificado(ctx, field)
			case "usuarioCreador":
				return ec.fieldContext_Empresa_usuarioCreador(ctx, field)
			case "compania":
				return ec.fieldContext_Empresa_compania(ctx, field)
			case "nombre":
				return ec.fieldContext_Empresa_nombre(ctx, field)
			case "tarjeta":
				return ec.fieldContext_Empresa_tarjeta(ctx, field)
			case "aPagar":
				return ec.fieldContext_Empresa_aPagar(ctx, field)
			case "premium":
				return ec.fieldContext_Empresa_premium(ctx, field)
			case "categoria":
				return ec.fieldContext_Empresa_categoria(ctx, field)
			case "latitud":
				return ec.fieldContext_Empresa_latitud(ctx, field)
			case "longitud":
				return ec.fieldContext_Empresa_longitud(ctx, field)
			case "movil":
				return ec.fieldContext_Empresa_movil(ctx, field)
			case "urlweb":
				return ec.fieldContext_Empresa_urlweb(ctx, field)
			case "referencia":
				return ec.fieldContext_Empresa_referencia(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empresa", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Marca_id(ctx context.Context, field graphql.CollectedField, obj *model.Marca) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Marca_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Marca_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Marca",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Marca_estado(ctx context.Context, field graphql.CollectedField, obj *model.Marca) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Marca_estado(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Estado, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Marca_estado(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Marca",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Marca_fechaCreado(ctx context.Context, field graphql.CollectedField, obj *model.Marca) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Marca_fechaCreado(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FechaCreado, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Marca_fechaCreado(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Marca",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Marca_fechaModificado(ctx context.Context, field graphql.CollectedField, obj *model.Marca) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Marca_fechaModificado(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FechaModificado, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Marca_fechaModificado(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Marca",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Marca_usuarioCreador(ctx context.Context, field graphql.CollectedField, obj *model.Marca) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Marca_usuarioCreador(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UsuarioCreador, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Marca_usuarioCreador(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Marca",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Marca_descripcion(ctx context.Context, field graphql.CollectedField, obj *model.Marca) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Marca_descripcion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Descripcion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Marca_descripcion(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Marca",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Marca_productos(ctx context.Context, field graphql.CollectedField, obj *model.Marca) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Marca_productos(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Productos, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ProductoNodeConnection)
	fc.Result = res
	return ec.marshalNProductoNodeConnection2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐProductoNodeConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Marca_productos(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Marca",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "pageInfo":
				return ec.fieldContext_ProductoNodeConnection_pageInfo(ctx, field)
			case "edges":
				return ec.fieldContext_ProductoNodeConnection_edges(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductoNodeConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Marca_productos_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _NomencladorProducto_id(ctx context.Context, field graphql.CollectedField, obj *model.NomencladorProducto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NomencladorProducto_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NomencladorProducto_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NomencladorProducto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NomencladorProducto_estado(ctx context.Context, field graphql.CollectedField, obj *model.NomencladorProducto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NomencladorProducto_estado(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Estado, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NomencladorProducto_estado(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NomencladorProducto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NomencladorProducto_fechaCreado(ctx context.Context, field graphql.CollectedField, obj *model.NomencladorProducto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NomencladorProducto_fechaCreado(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FechaCreado, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NomencladorProducto_fechaCreado(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NomencladorProducto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NomencladorProducto_fechaModificado(ctx context.Context, field graphql.CollectedField, obj *model.NomencladorProducto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NomencladorProducto_fechaModificado(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FechaModificado, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NomencladorProducto_fechaModificado(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NomencladorProducto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NomencladorProducto_tipo(ctx context.Context, field graphql.CollectedField, obj *model.NomencladorProducto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NomencladorProducto_tipo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tipo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NomencladorProducto_tipo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NomencladorProducto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NomencladorProducto_descripcion(ctx context.Context, field graphql.CollectedField, obj *model.NomencladorProducto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NomencladorProducto_descripcion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Descripcion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NomencladorProducto_descripcion(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NomencladorProducto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NomencladorProducto_categoria(ctx context.Context, field graphql.CollectedField, obj *model.NomencladorProducto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NomencladorProducto_categoria(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Categoria, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Categoria)
	fc.Result = res
	return ec.marshalOCategoria2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐCategoria(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NomencladorProducto_categoria(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NomencladorProducto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Categoria_id(ctx, field)
			case "estado":
				return ec.fieldContext_Categoria_estado(ctx, field)
			case "fechaCreado":
				return ec.fieldContext_Categoria_fechaCreado(ctx, field)
			case "fechaModificado":
				return ec.fieldContext_Categoria_fechaModificado(ctx, field)
			case "categoriaPadre":
				return ec.fieldContext_Categoria_categoriaPadre(ctx, field)
			case "tipoCategoria":
				return ec.fieldContext_Categoria_tipoCategoria(ctx, field)
			case "descripcion":
				return ec.fieldContext_Categoria_descripcion(ctx, field)
			case "imageDefault":
				return ec.fieldContext_Categoria_imageDefault(ctx, field)
			case "descuento":
				return ec.fieldContext_Categoria_descuento(ctx, field)
			case "codigoPais":
				return ec.fieldContext_Categoria_codigoPais(ctx, field)
			case "codigoLetra":
				return ec.fieldContext_Categoria_codigoLetra(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Categoria", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _NomencladorProducto_propiedades(ctx context.Context, field graphql.CollectedField, obj *model.NomencladorProducto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NomencladorProducto_propiedades(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Propiedades, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PropiedadProductoNodeConnection)
	fc.Result = res
	return ec.marshalNPropiedadProductoNodeConnection2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐPropiedadProductoNodeConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NomencladorProducto_propiedades(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NomencladorProducto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "pageInfo":
				return ec.fieldContext_PropiedadProductoNodeConnection_pageInfo(ctx, field)
			case "edges":
				return ec.fieldContext_PropiedadProductoNodeConnection_edges(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PropiedadProductoNodeConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_NomencladorProducto_propiedades_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _NomencladorProducto_productos(ctx context.Context, field graphql.CollectedField, obj *model.NomencladorProducto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NomencladorProducto_productos(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Productos, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ProductoNodeConnection)
	fc.Result = res
	return ec.marshalNProductoNodeConnection2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐProductoNodeConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NomencladorProducto_productos(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NomencladorProducto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "pageInfo":
				return ec.fieldContext_ProductoNodeConnection_pageInfo(ctx, field)
			case "edges":
				return ec.fieldContext_ProductoNodeConnection_edges(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductoNodeConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_NomencladorProducto_productos_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_hasPreviousPage(ctx context.Context, field graphql.CollectedField, obj *paging.PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PageInfo().HasPreviousPage(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_hasPreviousPage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField, obj *paging.PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_hasNextPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PageInfo().HasNextPage(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_totalCount(ctx context.Context, field graphql.CollectedField, obj *paging.PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PageInfo().TotalCount(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_totalCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_startCursor(ctx context.Context, field graphql.CollectedField, obj *paging.PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_startCursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PageInfo().StartCursor(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_startCursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_endCursor(ctx context.Context, field graphql.CollectedField, obj *paging.PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_endCursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PageInfo().EndCursor(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_endCursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Producto_id(ctx context.Context, field graphql.CollectedField, obj *model.Producto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Producto_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Producto_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Producto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Producto_estado(ctx context.Context, field graphql.CollectedField, obj *model.Producto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Producto_estado(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Estado, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Producto_estado(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Producto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Producto_fechaCreado(ctx context.Context, field graphql.CollectedField, obj *model.Producto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Producto_fechaCreado(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FechaCreado, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Producto_fechaCreado(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Producto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Producto_fechaModificado(ctx context.Context, field graphql.CollectedField, obj *model.Producto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Producto_fechaModificado(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FechaModificado, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Producto_fechaModificado(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Producto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Producto_usuarioCreador(ctx context.Context, field graphql.CollectedField, obj *model.Producto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Producto_usuarioCreador(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UsuarioCreador, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Producto_usuarioCreador(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Producto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Producto_precioCompra(ctx context.Context, field graphql.CollectedField, obj *model.Producto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Producto_precioCompra(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrecioCompra, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Producto_precioCompra(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Producto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Producto_precioVenta(ctx context.Context, field graphql.CollectedField, obj *model.Producto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Producto_precioVenta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrecioVenta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Producto_precioVenta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Producto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Producto_cantidad(ctx context.Context, field graphql.CollectedField, obj *model.Producto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Producto_cantidad(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cantidad, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Producto_cantidad(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Producto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Producto_descuento(ctx context.Context, field graphql.CollectedField, obj *model.Producto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Producto_descuento(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Descuento, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Producto_descuento(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Producto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Producto_lote(ctx context.Context, field graphql.CollectedField, obj *model.Producto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Producto_lote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Producto_lote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Producto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Producto_latitud(ctx context.Context, field graphql.CollectedField, obj *model.Producto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Producto_latitud(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Latitud, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Producto_latitud(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Producto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Producto_longitud(ctx context.Context, field graphql.CollectedField, obj *model.Producto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Producto_longitud(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Longitud, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Producto_longitud(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Producto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Producto_visible(ctx context.Context, field graphql.CollectedField, obj *model.Producto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Producto_visible(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Visible, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Producto_visible(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Producto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Producto_descripcion(ctx context.Context, field graphql.CollectedField, obj *model.Producto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Producto_descripcion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Descripcion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.NomencladorProducto)
	fc.Result = res
	return ec.marshalNNomencladorProducto2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐNomencladorProducto(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Producto_descripcion(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Producto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_NomencladorProducto_id(ctx, field)
			case "estado":
				return ec.fieldContext_NomencladorProducto_estado(ctx, field)
			case "fechaCreado":
				return ec.fieldContext_NomencladorProducto_fechaCreado(ctx, field)
			case "fechaModificado":
				return ec.fieldContext_NomencladorProducto_fechaModificado(ctx, field)
			case "tipo":
				return ec.fieldContext_NomencladorProducto_tipo(ctx, field)
			case "descripcion":
				return ec.fieldContext_NomencladorProducto_descripcion(ctx, field)
			case "categoria":
				return ec.fieldContext_NomencladorProducto_categoria(ctx, field)
			case "propiedades":
				return ec.fieldContext_NomencladorProducto_propiedades(ctx, field)
			case "productos":
				return ec.fieldContext_NomencladorProducto_productos(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NomencladorProducto", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Producto_descripcionCompleta(ctx context.Context, field graphql.CollectedField, obj *model.Producto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Producto_descripcionCompleta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DescripcionCompleta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Producto_descripcionCompleta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Producto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Producto_empresa(ctx context.Context, field graphql.CollectedField, obj *model.Producto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Producto_empresa(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Empresa, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Empresa)
	fc.Result = res
	return ec.marshalNEmpresa2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐEmpresa(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Producto_empresa(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Producto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Empresa_id(ctx, field)
			case "estado":
				return ec.fieldContext_Empresa_estado(ctx, field)
			case "fechacreado":
				return ec.fieldContext_Empresa_fechacreado(ctx, field)
			case "fechamodificado":
				return ec.fieldContext_Empresa_fechamodificado(ctx, field)
			case "usuarioCreador":
				return ec.fieldContext_Empresa_usuarioCreador(ctx, field)
			case "compania":
				return ec.fieldContext_Empresa_compania(ctx, field)
			case "nombre":
				return ec.fieldContext_Empresa_nombre(ctx, field)
			case "tarjeta":
				return ec.fieldContext_Empresa_tarjeta(ctx, field)
			case "aPagar":
				return ec.fieldContext_Empresa_aPagar(ctx, field)
			case "premium":
				return ec.fieldContext_Empresa_premium(ctx, field)
			case "categoria":
				return ec.fieldContext_Empresa_categoria(ctx, field)
			case "latitud":
				return ec.fieldContext_Empresa_latitud(ctx, field)
			case "longitud":
				return ec.fieldContext_Empresa_longitud(ctx, field)
			case "movil":
				return ec.fieldContext_Empresa_movil(ctx, field)
			case "urlweb":
				return ec.fieldContext_Empresa_urlweb(ctx, field)
			case "referencia":
				return ec.fieldContext_Empresa_referencia(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empresa", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Producto_marca(ctx context.Context, field graphql.CollectedField, obj *model.Producto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Producto_marca(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Marca, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Marca)
	fc.Result = res
	return ec.marshalOMarca2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐMarca(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Producto_marca(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Producto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Marca_id(ctx, field)
			case "estado":
				return ec.fieldContext_Marca_estado(ctx, field)
			case "fechaCreado":
				return ec.fieldContext_Marca_fechaCreado(ctx, field)
			case "fechaModificado":
				return ec.fieldContext_Marca_fechaModificado(ctx, field)
			case "usuarioCreador":
				return ec.fieldContext_Marca_usuarioCreador(ctx, field)
			case "descripcion":
				return ec.fieldContext_Marca_descripcion(ctx, field)
			case "productos":
				return ec.fieldContext_Marca_productos(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Marca", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Producto_codigo(ctx context.Context, field graphql.CollectedField, obj *model.Producto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Producto_codigo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Codigo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Producto_codigo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Producto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Producto_destacado(ctx context.Context, field graphql.CollectedField, obj *model.Producto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Producto_destacado(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Destacado, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Producto_destacado(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Producto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Producto_usuarios(ctx context.Context, field graphql.CollectedField, obj *model.Producto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Producto_usuarios(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Usuarios, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.UserNodeConnection)
	fc.Result = res
	return ec.marshalNUserNodeConnection2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐUserNodeConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Producto_usuarios(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Producto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "pageInfo":
				return ec.fieldContext_UserNodeConnection_pageInfo(ctx, field)
			case "edges":
				return ec.fieldContext_UserNodeConnection_edges(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserNodeConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Producto_calificaciones(ctx context.Context, field graphql.CollectedField, obj *model.Producto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Producto_calificaciones(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Calificaciones, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CalificacionNodeConnection)
	fc.Result = res
	return ec.marshalNCalificacionNodeConnection2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐCalificacionNodeConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Producto_calificaciones(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Producto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "pageInfo":
				return ec.fieldContext_CalificacionNodeConnection_pageInfo(ctx, field)
			case "edges":
				return ec.fieldContext_CalificacionNodeConnection_edges(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CalificacionNodeConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Producto_propiedadesValores(ctx context.Context, field graphql.CollectedField, obj *model.Producto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Producto_propiedadesValores(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PropiedadesValores, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PropiedadProductoNodeConnection)
	fc.Result = res
	return ec.marshalNPropiedadProductoNodeConnection2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐPropiedadProductoNodeConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Producto_propiedadesValores(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Producto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "pageInfo":
				return ec.fieldContext_PropiedadProductoNodeConnection_pageInfo(ctx, field)
			case "edges":
				return ec.fieldContext_PropiedadProductoNodeConnection_edges(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PropiedadProductoNodeConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Producto_propiedadesValores_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Producto_comentarios(ctx context.Context, field graphql.CollectedField, obj *model.Producto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Producto_comentarios(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comentarios, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ComentarioNodeConnection)
	fc.Result = res
	return ec.marshalNComentarioNodeConnection2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐComentarioNodeConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Producto_comentarios(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Producto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "pageInfo":
				return ec.fieldContext_ComentarioNodeConnection_pageInfo(ctx, field)
			case "edges":
				return ec.fieldContext_ComentarioNodeConnection_edges(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ComentarioNodeConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Producto_comentarios_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _ProductoNodeConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.ProductoNodeConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductoNodeConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*paging.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋnrftaᚋgoᚑpagingᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductoNodeConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductoNodeConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "totalCount":
				return ec.fieldContext_PageInfo_totalCount(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductoNodeConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.ProductoNodeConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductoNodeConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ProductoNodeEdge)
	fc.Result = res
	return ec.marshalNProductoNodeEdge2ᚕᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐProductoNodeEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductoNodeConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductoNodeConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_ProductoNodeEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_ProductoNodeEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductoNodeEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductoNodeEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.ProductoNodeEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductoNodeEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductoNodeEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductoNodeEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductoNodeEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.ProductoNodeEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductoNodeEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Producto)
	fc.Result = res
	return ec.marshalOProducto2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐProducto(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductoNodeEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductoNodeEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Producto_id(ctx, field)
			case "estado":
				return ec.fieldContext_Producto_estado(ctx, field)
			case "fechaCreado":
				return ec.fieldContext_Producto_fechaCreado(ctx, field)
			case "fechaModificado":
				return ec.fieldContext_Producto_fechaModificado(ctx, field)
			case "usuarioCreador":
				return ec.fieldContext_Producto_usuarioCreador(ctx, field)
			case "precioCompra":
				return ec.fieldContext_Producto_precioCompra(ctx, field)
			case "precioVenta":
				return ec.fieldContext_Producto_precioVenta(ctx, field)
			case "cantidad":
				return ec.fieldContext_Producto_cantidad(ctx, field)
			case "descuento":
				return ec.fieldContext_Producto_descuento(ctx, field)
			case "lote":
				return ec.fieldContext_Producto_lote(ctx, field)
			case "latitud":
				return ec.fieldContext_Producto_latitud(ctx, field)
			case "longitud":
				return ec.fieldContext_Producto_longitud(ctx, field)
			case "visible":
				return ec.fieldContext_Producto_visible(ctx, field)
			case "descripcion":
				return ec.fieldContext_Producto_descripcion(ctx, field)
			case "descripcionCompleta":
				return ec.fieldContext_Producto_descripcionCompleta(ctx, field)
			case "empresa":
				return ec.fieldContext_Producto_empresa(ctx, field)
			case "marca":
				return ec.fieldContext_Producto_marca(ctx, field)
			case "codigo":
				return ec.fieldContext_Producto_codigo(ctx, field)
			case "destacado":
				return ec.fieldContext_Producto_destacado(ctx, field)
			case "usuarios":
				return ec.fieldContext_Producto_usuarios(ctx, field)
			case "calificaciones":
				return ec.fieldContext_Producto_calificaciones(ctx, field)
			case "propiedadesValores":
				return ec.fieldContext_Producto_propiedadesValores(ctx, field)
			case "comentarios":
				return ec.fieldContext_Producto_comentarios(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Producto", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PropiedadProducto_id(ctx context.Context, field graphql.CollectedField, obj *model.PropiedadProducto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PropiedadProducto_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PropiedadProducto_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PropiedadProducto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PropiedadProducto_estado(ctx context.Context, field graphql.CollectedField, obj *model.PropiedadProducto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PropiedadProducto_estado(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Estado, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PropiedadProducto_estado(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PropiedadProducto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PropiedadProducto_fechaCreado(ctx context.Context, field graphql.CollectedField, obj *model.PropiedadProducto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PropiedadProducto_fechaCreado(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FechaCreado, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PropiedadProducto_fechaCreado(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PropiedadProducto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PropiedadProducto_fechaModificado(ctx context.Context, field graphql.CollectedField, obj *model.PropiedadProducto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PropiedadProducto_fechaModificado(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FechaModificado, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PropiedadProducto_fechaModificado(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PropiedadProducto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PropiedadProducto_usuarioCreador(ctx context.Context, field graphql.CollectedField, obj *model.PropiedadProducto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PropiedadProducto_usuarioCreador(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UsuarioCreador, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PropiedadProducto_usuarioCreador(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PropiedadProducto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PropiedadProducto_tipo(ctx context.Context, field graphql.CollectedField, obj *model.PropiedadProducto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PropiedadProducto_tipo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tipo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.PropiedadProductoTipo)
	fc.Result = res
	return ec.marshalNPropiedadProductoTipo2githubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐPropiedadProductoTipo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PropiedadProducto_tipo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PropiedadProducto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PropiedadProductoTipo does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PropiedadProducto_descripcion(ctx context.Context, field graphql.CollectedField, obj *model.PropiedadProducto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PropiedadProducto_descripcion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Descripcion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PropiedadProducto_descripcion(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PropiedadProducto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PropiedadProductoNodeConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.PropiedadProductoNodeConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PropiedadProductoNodeConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*paging.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋnrftaᚋgoᚑpagingᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PropiedadProductoNodeConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PropiedadProductoNodeConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "totalCount":
				return ec.fieldContext_PageInfo_totalCount(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PropiedadProductoNodeConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.PropiedadProductoNodeConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PropiedadProductoNodeConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.PropiedadProductoNodeEdge)
	fc.Result = res
	return ec.marshalNPropiedadProductoNodeEdge2ᚕᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐPropiedadProductoNodeEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PropiedadProductoNodeConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PropiedadProductoNodeConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_PropiedadProductoNodeEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_PropiedadProductoNodeEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PropiedadProductoNodeEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PropiedadProductoNodeEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.PropiedadProductoNodeEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PropiedadProductoNodeEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PropiedadProductoNodeEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PropiedadProductoNodeEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PropiedadProductoNodeEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.PropiedadProductoNodeEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PropiedadProductoNodeEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PropiedadProducto)
	fc.Result = res
	return ec.marshalOPropiedadProducto2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐPropiedadProducto(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PropiedadProductoNodeEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PropiedadProductoNodeEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PropiedadProducto_id(ctx, field)
			case "estado":
				return ec.fieldContext_PropiedadProducto_estado(ctx, field)
			case "fechaCreado":
				return ec.fieldContext_PropiedadProducto_fechaCreado(ctx, field)
			case "fechaModificado":
				return ec.fieldContext_PropiedadProducto_fechaModificado(ctx, field)
			case "usuarioCreador":
				return ec.fieldContext_PropiedadProducto_usuarioCreador(ctx, field)
			case "tipo":
				return ec.fieldContext_PropiedadProducto_tipo(ctx, field)
			case "descripcion":
				return ec.fieldContext_PropiedadProducto_descripcion(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PropiedadProducto", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_users(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_users(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Users(rctx, fc.Args["page"].(*paging.PageArgs))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.UserNodeConnection)
	fc.Result = res
	return ec.marshalNUserNodeConnection2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐUserNodeConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_users(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "pageInfo":
				return ec.fieldContext_UserNodeConnection_pageInfo(ctx, field)
			case "edges":
				return ec.fieldContext_UserNodeConnection_edges(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserNodeConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_users_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_categoria(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_categoria(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Categoria(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Categoria)
	fc.Result = res
	return ec.marshalOCategoria2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐCategoria(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_categoria(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Categoria_id(ctx, field)
			case "estado":
				return ec.fieldContext_Categoria_estado(ctx, field)
			case "fechaCreado":
				return ec.fieldContext_Categoria_fechaCreado(ctx, field)
			case "fechaModificado":
				return ec.fieldContext_Categoria_fechaModificado(ctx, field)
			case "categoriaPadre":
				return ec.fieldContext_Categoria_categoriaPadre(ctx, field)
			case "tipoCategoria":
				return ec.fieldContext_Categoria_tipoCategoria(ctx, field)
			case "descripcion":
				return ec.fieldContext_Categoria_descripcion(ctx, field)
			case "imageDefault":
				return ec.fieldContext_Categoria_imageDefault(ctx, field)
			case "descuento":
				return ec.fieldContext_Categoria_descuento(ctx, field)
			case "codigoPais":
				return ec.fieldContext_Categoria_codigoPais(ctx, field)
			case "codigoLetra":
				return ec.fieldContext_Categoria_codigoLetra(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Categoria", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_categoria_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_categorias(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_categorias(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Categorias(rctx, fc.Args["page"].(*paging.PageArgs), fc.Args["input"].(*model.CategoriaInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CategoriaNodeConnection)
	fc.Result = res
	return ec.marshalOCategoriaNodeConnection2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐCategoriaNodeConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_categorias(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "pageInfo":
				return ec.fieldContext_CategoriaNodeConnection_pageInfo(ctx, field)
			case "edges":
				return ec.fieldContext_CategoriaNodeConnection_edges(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CategoriaNodeConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_categorias_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_producto(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_producto(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Producto(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Producto)
	fc.Result = res
	return ec.marshalOProducto2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐProducto(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_producto(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Producto_id(ctx, field)
			case "estado":
				return ec.fieldContext_Producto_estado(ctx, field)
			case "fechaCreado":
				return ec.fieldContext_Producto_fechaCreado(ctx, field)
			case "fechaModificado":
				return ec.fieldContext_Producto_fechaModificado(ctx, field)
			case "usuarioCreador":
				return ec.fieldContext_Producto_usuarioCreador(ctx, field)
			case "precioCompra":
				return ec.fieldContext_Producto_precioCompra(ctx, field)
			case "precioVenta":
				return ec.fieldContext_Producto_precioVenta(ctx, field)
			case "cantidad":
				return ec.fieldContext_Producto_cantidad(ctx, field)
			case "descuento":
				return ec.fieldContext_Producto_descuento(ctx, field)
			case "lote":
				return ec.fieldContext_Producto_lote(ctx, field)
			case "latitud":
				return ec.fieldContext_Producto_latitud(ctx, field)
			case "longitud":
				return ec.fieldContext_Producto_longitud(ctx, field)
			case "visible":
				return ec.fieldContext_Producto_visible(ctx, field)
			case "descripcion":
				return ec.fieldContext_Producto_descripcion(ctx, field)
			case "descripcionCompleta":
				return ec.fieldContext_Producto_descripcionCompleta(ctx, field)
			case "empresa":
				return ec.fieldContext_Producto_empresa(ctx, field)
			case "marca":
				return ec.fieldContext_Producto_marca(ctx, field)
			case "codigo":
				return ec.fieldContext_Producto_codigo(ctx, field)
			case "destacado":
				return ec.fieldContext_Producto_destacado(ctx, field)
			case "usuarios":
				return ec.fieldContext_Producto_usuarios(ctx, field)
			case "calificaciones":
				return ec.fieldContext_Producto_calificaciones(ctx, field)
			case "propiedadesValores":
				return ec.fieldContext_Producto_propiedadesValores(ctx, field)
			case "comentarios":
				return ec.fieldContext_Producto_comentarios(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Producto", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_producto_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_productos(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_productos(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Productos(rctx, fc.Args["page"].(*paging.PageArgs), fc.Args["input"].(*model.ProductoInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProductoNodeConnection)
	fc.Result = res
	return ec.marshalOProductoNodeConnection2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐProductoNodeConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_productos(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "pageInfo":
				return ec.fieldContext_ProductoNodeConnection_pageInfo(ctx, field)
			case "edges":
				return ec.fieldContext_ProductoNodeConnection_edges(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductoNodeConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_productos_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TipoCategoria_id(ctx context.Context, field graphql.CollectedField, obj *model.TipoCategoria) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TipoCategoria_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TipoCategoria_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TipoCategoria",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TipoCategoria_estado(ctx context.Context, field graphql.CollectedField, obj *model.TipoCategoria) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TipoCategoria_estado(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Estado, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TipoCategoria_estado(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TipoCategoria",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TipoCategoria_fechacreado(ctx context.Context, field graphql.CollectedField, obj *model.TipoCategoria) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TipoCategoria_fechacreado(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fechacreado, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TipoCategoria_fechacreado(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TipoCategoria",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TipoCategoria_fechamodificado(ctx context.Context, field graphql.CollectedField, obj *model.TipoCategoria) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TipoCategoria_fechamodificado(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fechamodificado, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TipoCategoria_fechamodificado(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TipoCategoria",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TipoCategoria_nombre(ctx context.Context, field graphql.CollectedField, obj *model.TipoCategoria) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TipoCategoria_nombre(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nombre, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TipoCategoria_nombre(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TipoCategoria",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TipoCategoria_abrev(ctx context.Context, field graphql.CollectedField, obj *model.TipoCategoria) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TipoCategoria_abrev(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Abrev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TipoCategoria_abrev(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TipoCategoria",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TipoCategoria_sub(ctx context.Context, field graphql.CollectedField, obj *model.TipoCategoria) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TipoCategoria_sub(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sub, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TipoCategoria_sub(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TipoCategoria",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_id(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_firstName(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_firstName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_firstName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_lastName(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_lastName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_lastName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserNodeConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.UserNodeConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserNodeConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*paging.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋnrftaᚋgoᚑpagingᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserNodeConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserNodeConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "totalCount":
				return ec.fieldContext_PageInfo_totalCount(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserNodeConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.UserNodeConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserNodeConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.UserNodeEdge)
	fc.Result = res
	return ec.marshalOUserNodeEdge2ᚕᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐUserNodeEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserNodeConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserNodeConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_UserNodeEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_UserNodeEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserNodeEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserNodeEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.UserNodeEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserNodeEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserNodeEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserNodeEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserNodeEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.UserNodeEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserNodeEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserNodeEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserNodeEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputCategoriaInput(ctx context.Context, obj interface{}) (model.CategoriaInput, error) {
	var it model.CategoriaInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "descripcion", "tipoCategoriaId", "categoriaPadreId", "codigoPais", "codigoLetra"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descripcion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descripcion"))
			it.Descripcion, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tipoCategoriaId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tipoCategoriaId"))
			it.TipoCategoriaID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "categoriaPadreId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categoriaPadreId"))
			it.CategoriaPadreID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "codigoPais":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codigoPais"))
			it.CodigoPais, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "codigoLetra":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codigoLetra"))
			it.CodigoLetra, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEmpresaInput(ctx context.Context, obj interface{}) (model.EmpresaInput, error) {
	var it model.EmpresaInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "categoria", "nombre"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "categoria":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categoria"))
			it.Categoria, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nombre":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nombre"))
			it.Nombre, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPageArgs(ctx context.Context, obj interface{}) (paging.PageArgs, error) {
	var it paging.PageArgs
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"first", "last", "before", "after"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "first":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
			it.First, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "last":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PageArgs().Last(ctx, &it, data); err != nil {
				return it, err
			}
		case "before":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PageArgs().Before(ctx, &it, data); err != nil {
				return it, err
			}
		case "after":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
			it.After, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProductoInput(ctx context.Context, obj interface{}) (model.ProductoInput, error) {
	var it model.ProductoInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"descripcion", "categoria", "empresa", "marca", "destacado"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "descripcion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descripcion"))
			it.Descripcion, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "categoria":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categoria"))
			it.Categoria, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "empresa":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("empresa"))
			it.Empresa, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "marca":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("marca"))
			it.Marca, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "destacado":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("destacado"))
			it.Destacado, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var calificacionImplementors = []string{"Calificacion"}

func (ec *executionContext) _Calificacion(ctx context.Context, sel ast.SelectionSet, obj *model.Calificacion) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, calificacionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Calificacion")
		case "id":

			out.Values[i] = ec._Calificacion_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "estado":

			out.Values[i] = ec._Calificacion_estado(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fechacreado":

			out.Values[i] = ec._Calificacion_fechacreado(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fechamodificado":

			out.Values[i] = ec._Calificacion_fechamodificado(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "calificacion":

			out.Values[i] = ec._Calificacion_calificacion(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "usuario":

			out.Values[i] = ec._Calificacion_usuario(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "producto":

			out.Values[i] = ec._Calificacion_producto(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var calificacionNodeConnectionImplementors = []string{"CalificacionNodeConnection"}

func (ec *executionContext) _CalificacionNodeConnection(ctx context.Context, sel ast.SelectionSet, obj *model.CalificacionNodeConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, calificacionNodeConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CalificacionNodeConnection")
		case "pageInfo":

			out.Values[i] = ec._CalificacionNodeConnection_pageInfo(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":

			out.Values[i] = ec._CalificacionNodeConnection_edges(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var calificacionNodeEdgeImplementors = []string{"CalificacionNodeEdge"}

func (ec *executionContext) _CalificacionNodeEdge(ctx context.Context, sel ast.SelectionSet, obj *model.CalificacionNodeEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, calificacionNodeEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CalificacionNodeEdge")
		case "cursor":

			out.Values[i] = ec._CalificacionNodeEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":

			out.Values[i] = ec._CalificacionNodeEdge_node(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var categoriaImplementors = []string{"Categoria"}

func (ec *executionContext) _Categoria(ctx context.Context, sel ast.SelectionSet, obj *model.Categoria) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, categoriaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Categoria")
		case "id":

			out.Values[i] = ec._Categoria_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "estado":

			out.Values[i] = ec._Categoria_estado(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fechaCreado":

			out.Values[i] = ec._Categoria_fechaCreado(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fechaModificado":

			out.Values[i] = ec._Categoria_fechaModificado(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "categoriaPadre":

			out.Values[i] = ec._Categoria_categoriaPadre(ctx, field, obj)

		case "tipoCategoria":

			out.Values[i] = ec._Categoria_tipoCategoria(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "descripcion":

			out.Values[i] = ec._Categoria_descripcion(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "imageDefault":

			out.Values[i] = ec._Categoria_imageDefault(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "descuento":

			out.Values[i] = ec._Categoria_descuento(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "codigoPais":

			out.Values[i] = ec._Categoria_codigoPais(ctx, field, obj)

		case "codigoLetra":

			out.Values[i] = ec._Categoria_codigoLetra(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var categoriaNodeConnectionImplementors = []string{"CategoriaNodeConnection"}

func (ec *executionContext) _CategoriaNodeConnection(ctx context.Context, sel ast.SelectionSet, obj *model.CategoriaNodeConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, categoriaNodeConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CategoriaNodeConnection")
		case "pageInfo":

			out.Values[i] = ec._CategoriaNodeConnection_pageInfo(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":

			out.Values[i] = ec._CategoriaNodeConnection_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var categoriaNodeEdgeImplementors = []string{"CategoriaNodeEdge"}

func (ec *executionContext) _CategoriaNodeEdge(ctx context.Context, sel ast.SelectionSet, obj *model.CategoriaNodeEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, categoriaNodeEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CategoriaNodeEdge")
		case "cursor":

			out.Values[i] = ec._CategoriaNodeEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":

			out.Values[i] = ec._CategoriaNodeEdge_node(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var comentarioImplementors = []string{"Comentario"}

func (ec *executionContext) _Comentario(ctx context.Context, sel ast.SelectionSet, obj *model.Comentario) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, comentarioImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Comentario")
		case "id":

			out.Values[i] = ec._Comentario_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "estado":

			out.Values[i] = ec._Comentario_estado(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fechaCreado":

			out.Values[i] = ec._Comentario_fechaCreado(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fechaModificado":

			out.Values[i] = ec._Comentario_fechaModificado(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cliente":

			out.Values[i] = ec._Comentario_cliente(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "text":

			out.Values[i] = ec._Comentario_text(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "producto":

			out.Values[i] = ec._Comentario_producto(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var comentarioNodeConnectionImplementors = []string{"ComentarioNodeConnection"}

func (ec *executionContext) _ComentarioNodeConnection(ctx context.Context, sel ast.SelectionSet, obj *model.ComentarioNodeConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, comentarioNodeConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ComentarioNodeConnection")
		case "pageInfo":

			out.Values[i] = ec._ComentarioNodeConnection_pageInfo(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":

			out.Values[i] = ec._ComentarioNodeConnection_edges(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var comentarioNodeEdgeImplementors = []string{"ComentarioNodeEdge"}

func (ec *executionContext) _ComentarioNodeEdge(ctx context.Context, sel ast.SelectionSet, obj *model.ComentarioNodeEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, comentarioNodeEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ComentarioNodeEdge")
		case "cursor":

			out.Values[i] = ec._ComentarioNodeEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":

			out.Values[i] = ec._ComentarioNodeEdge_node(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var companniaImplementors = []string{"Compannia"}

func (ec *executionContext) _Compannia(ctx context.Context, sel ast.SelectionSet, obj *model.Compannia) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, companniaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Compannia")
		case "id":

			out.Values[i] = ec._Compannia_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "estado":

			out.Values[i] = ec._Compannia_estado(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fechaCreado":

			out.Values[i] = ec._Compannia_fechaCreado(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fechaModificado":

			out.Values[i] = ec._Compannia_fechaModificado(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "usuarioCreador":

			out.Values[i] = ec._Compannia_usuarioCreador(ctx, field, obj)

		case "nombre":

			out.Values[i] = ec._Compannia_nombre(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pais":

			out.Values[i] = ec._Compannia_pais(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "empresas":

			out.Values[i] = ec._Compannia_empresas(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "usuarios":

			out.Values[i] = ec._Compannia_usuarios(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var companniaNodeConnectionImplementors = []string{"CompanniaNodeConnection"}

func (ec *executionContext) _CompanniaNodeConnection(ctx context.Context, sel ast.SelectionSet, obj *model.CompanniaNodeConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, companniaNodeConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompanniaNodeConnection")
		case "pageInfo":

			out.Values[i] = ec._CompanniaNodeConnection_pageInfo(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":

			out.Values[i] = ec._CompanniaNodeConnection_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var companniaNodeEdgeImplementors = []string{"CompanniaNodeEdge"}

func (ec *executionContext) _CompanniaNodeEdge(ctx context.Context, sel ast.SelectionSet, obj *model.CompanniaNodeEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, companniaNodeEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompanniaNodeEdge")
		case "cursor":

			out.Values[i] = ec._CompanniaNodeEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":

			out.Values[i] = ec._CompanniaNodeEdge_node(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var empresaImplementors = []string{"Empresa"}

func (ec *executionContext) _Empresa(ctx context.Context, sel ast.SelectionSet, obj *model.Empresa) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, empresaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Empresa")
		case "id":

			out.Values[i] = ec._Empresa_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "estado":

			out.Values[i] = ec._Empresa_estado(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fechacreado":

			out.Values[i] = ec._Empresa_fechacreado(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fechamodificado":

			out.Values[i] = ec._Empresa_fechamodificado(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "usuarioCreador":

			out.Values[i] = ec._Empresa_usuarioCreador(ctx, field, obj)

		case "compania":

			out.Values[i] = ec._Empresa_compania(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nombre":

			out.Values[i] = ec._Empresa_nombre(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tarjeta":

			out.Values[i] = ec._Empresa_tarjeta(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "aPagar":

			out.Values[i] = ec._Empresa_aPagar(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "premium":

			out.Values[i] = ec._Empresa_premium(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "categoria":

			out.Values[i] = ec._Empresa_categoria(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "latitud":

			out.Values[i] = ec._Empresa_latitud(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "longitud":

			out.Values[i] = ec._Empresa_longitud(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "movil":

			out.Values[i] = ec._Empresa_movil(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "urlweb":

			out.Values[i] = ec._Empresa_urlweb(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "referencia":

			out.Values[i] = ec._Empresa_referencia(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var empresaNodeConnectionImplementors = []string{"EmpresaNodeConnection"}

func (ec *executionContext) _EmpresaNodeConnection(ctx context.Context, sel ast.SelectionSet, obj *model.EmpresaNodeConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, empresaNodeConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EmpresaNodeConnection")
		case "pageInfo":

			out.Values[i] = ec._EmpresaNodeConnection_pageInfo(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":

			out.Values[i] = ec._EmpresaNodeConnection_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var empresaNodeEdgeImplementors = []string{"EmpresaNodeEdge"}

func (ec *executionContext) _EmpresaNodeEdge(ctx context.Context, sel ast.SelectionSet, obj *model.EmpresaNodeEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, empresaNodeEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EmpresaNodeEdge")
		case "cursor":

			out.Values[i] = ec._EmpresaNodeEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":

			out.Values[i] = ec._EmpresaNodeEdge_node(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var marcaImplementors = []string{"Marca"}

func (ec *executionContext) _Marca(ctx context.Context, sel ast.SelectionSet, obj *model.Marca) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, marcaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Marca")
		case "id":

			out.Values[i] = ec._Marca_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "estado":

			out.Values[i] = ec._Marca_estado(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fechaCreado":

			out.Values[i] = ec._Marca_fechaCreado(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fechaModificado":

			out.Values[i] = ec._Marca_fechaModificado(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "usuarioCreador":

			out.Values[i] = ec._Marca_usuarioCreador(ctx, field, obj)

		case "descripcion":

			out.Values[i] = ec._Marca_descripcion(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "productos":

			out.Values[i] = ec._Marca_productos(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var nomencladorProductoImplementors = []string{"NomencladorProducto"}

func (ec *executionContext) _NomencladorProducto(ctx context.Context, sel ast.SelectionSet, obj *model.NomencladorProducto) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, nomencladorProductoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NomencladorProducto")
		case "id":

			out.Values[i] = ec._NomencladorProducto_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "estado":

			out.Values[i] = ec._NomencladorProducto_estado(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fechaCreado":

			out.Values[i] = ec._NomencladorProducto_fechaCreado(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fechaModificado":

			out.Values[i] = ec._NomencladorProducto_fechaModificado(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tipo":

			out.Values[i] = ec._NomencladorProducto_tipo(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "descripcion":

			out.Values[i] = ec._NomencladorProducto_descripcion(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "categoria":

			out.Values[i] = ec._NomencladorProducto_categoria(ctx, field, obj)

		case "propiedades":

			out.Values[i] = ec._NomencladorProducto_propiedades(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "productos":

			out.Values[i] = ec._NomencladorProducto_productos(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pageInfoImplementors = []string{"PageInfo"}

func (ec *executionContext) _PageInfo(ctx context.Context, sel ast.SelectionSet, obj *paging.PageInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pageInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PageInfo")
		case "hasPreviousPage":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PageInfo_hasPreviousPage(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "hasNextPage":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PageInfo_hasNextPage(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "totalCount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PageInfo_totalCount(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "startCursor":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PageInfo_startCursor(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "endCursor":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PageInfo_endCursor(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var productoImplementors = []string{"Producto"}

func (ec *executionContext) _Producto(ctx context.Context, sel ast.SelectionSet, obj *model.Producto) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Producto")
		case "id":

			out.Values[i] = ec._Producto_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "estado":

			out.Values[i] = ec._Producto_estado(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fechaCreado":

			out.Values[i] = ec._Producto_fechaCreado(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fechaModificado":

			out.Values[i] = ec._Producto_fechaModificado(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "usuarioCreador":

			out.Values[i] = ec._Producto_usuarioCreador(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "precioCompra":

			out.Values[i] = ec._Producto_precioCompra(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "precioVenta":

			out.Values[i] = ec._Producto_precioVenta(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cantidad":

			out.Values[i] = ec._Producto_cantidad(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "descuento":

			out.Values[i] = ec._Producto_descuento(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lote":

			out.Values[i] = ec._Producto_lote(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "latitud":

			out.Values[i] = ec._Producto_latitud(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "longitud":

			out.Values[i] = ec._Producto_longitud(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "visible":

			out.Values[i] = ec._Producto_visible(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "descripcion":

			out.Values[i] = ec._Producto_descripcion(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "descripcionCompleta":

			out.Values[i] = ec._Producto_descripcionCompleta(ctx, field, obj)

		case "empresa":

			out.Values[i] = ec._Producto_empresa(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "marca":

			out.Values[i] = ec._Producto_marca(ctx, field, obj)

		case "codigo":

			out.Values[i] = ec._Producto_codigo(ctx, field, obj)

		case "destacado":

			out.Values[i] = ec._Producto_destacado(ctx, field, obj)

		case "usuarios":

			out.Values[i] = ec._Producto_usuarios(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "calificaciones":

			out.Values[i] = ec._Producto_calificaciones(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "propiedadesValores":

			out.Values[i] = ec._Producto_propiedadesValores(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "comentarios":

			out.Values[i] = ec._Producto_comentarios(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var productoNodeConnectionImplementors = []string{"ProductoNodeConnection"}

func (ec *executionContext) _ProductoNodeConnection(ctx context.Context, sel ast.SelectionSet, obj *model.ProductoNodeConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productoNodeConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductoNodeConnection")
		case "pageInfo":

			out.Values[i] = ec._ProductoNodeConnection_pageInfo(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":

			out.Values[i] = ec._ProductoNodeConnection_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var productoNodeEdgeImplementors = []string{"ProductoNodeEdge"}

func (ec *executionContext) _ProductoNodeEdge(ctx context.Context, sel ast.SelectionSet, obj *model.ProductoNodeEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productoNodeEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductoNodeEdge")
		case "cursor":

			out.Values[i] = ec._ProductoNodeEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":

			out.Values[i] = ec._ProductoNodeEdge_node(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var propiedadProductoImplementors = []string{"PropiedadProducto"}

func (ec *executionContext) _PropiedadProducto(ctx context.Context, sel ast.SelectionSet, obj *model.PropiedadProducto) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, propiedadProductoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PropiedadProducto")
		case "id":

			out.Values[i] = ec._PropiedadProducto_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "estado":

			out.Values[i] = ec._PropiedadProducto_estado(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fechaCreado":

			out.Values[i] = ec._PropiedadProducto_fechaCreado(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fechaModificado":

			out.Values[i] = ec._PropiedadProducto_fechaModificado(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "usuarioCreador":

			out.Values[i] = ec._PropiedadProducto_usuarioCreador(ctx, field, obj)

		case "tipo":

			out.Values[i] = ec._PropiedadProducto_tipo(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "descripcion":

			out.Values[i] = ec._PropiedadProducto_descripcion(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var propiedadProductoNodeConnectionImplementors = []string{"PropiedadProductoNodeConnection"}

func (ec *executionContext) _PropiedadProductoNodeConnection(ctx context.Context, sel ast.SelectionSet, obj *model.PropiedadProductoNodeConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, propiedadProductoNodeConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PropiedadProductoNodeConnection")
		case "pageInfo":

			out.Values[i] = ec._PropiedadProductoNodeConnection_pageInfo(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":

			out.Values[i] = ec._PropiedadProductoNodeConnection_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var propiedadProductoNodeEdgeImplementors = []string{"PropiedadProductoNodeEdge"}

func (ec *executionContext) _PropiedadProductoNodeEdge(ctx context.Context, sel ast.SelectionSet, obj *model.PropiedadProductoNodeEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, propiedadProductoNodeEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PropiedadProductoNodeEdge")
		case "cursor":

			out.Values[i] = ec._PropiedadProductoNodeEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":

			out.Values[i] = ec._PropiedadProductoNodeEdge_node(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "users":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_users(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "categoria":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_categoria(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "categorias":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_categorias(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "producto":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_producto(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "productos":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_productos(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "__type":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})

		case "__schema":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var tipoCategoriaImplementors = []string{"TipoCategoria"}

func (ec *executionContext) _TipoCategoria(ctx context.Context, sel ast.SelectionSet, obj *model.TipoCategoria) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tipoCategoriaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TipoCategoria")
		case "id":

			out.Values[i] = ec._TipoCategoria_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "estado":

			out.Values[i] = ec._TipoCategoria_estado(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fechacreado":

			out.Values[i] = ec._TipoCategoria_fechacreado(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fechamodificado":

			out.Values[i] = ec._TipoCategoria_fechamodificado(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nombre":

			out.Values[i] = ec._TipoCategoria_nombre(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "abrev":

			out.Values[i] = ec._TipoCategoria_abrev(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sub":

			out.Values[i] = ec._TipoCategoria_sub(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userImplementors = []string{"User"}

func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *model.User) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "id":

			out.Values[i] = ec._User_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "firstName":

			out.Values[i] = ec._User_firstName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lastName":

			out.Values[i] = ec._User_lastName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userNodeConnectionImplementors = []string{"UserNodeConnection"}

func (ec *executionContext) _UserNodeConnection(ctx context.Context, sel ast.SelectionSet, obj *model.UserNodeConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userNodeConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserNodeConnection")
		case "pageInfo":

			out.Values[i] = ec._UserNodeConnection_pageInfo(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":

			out.Values[i] = ec._UserNodeConnection_edges(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userNodeEdgeImplementors = []string{"UserNodeEdge"}

func (ec *executionContext) _UserNodeEdge(ctx context.Context, sel ast.SelectionSet, obj *model.UserNodeEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userNodeEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserNodeEdge")
		case "cursor":

			out.Values[i] = ec._UserNodeEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":

			out.Values[i] = ec._UserNodeEdge_node(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":

			out.Values[i] = ec.___Directive_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Directive_description(ctx, field, obj)

		case "locations":

			out.Values[i] = ec.___Directive_locations(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":

			out.Values[i] = ec.___Directive_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isRepeatable":

			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":

			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)

		case "isDeprecated":

			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":

			out.Values[i] = ec.___Field_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Field_description(ctx, field, obj)

		case "args":

			out.Values[i] = ec.___Field_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":

			out.Values[i] = ec.___Field_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":

			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":

			out.Values[i] = ec.___InputValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___InputValue_description(ctx, field, obj)

		case "type":

			out.Values[i] = ec.___InputValue_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":

			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":

			out.Values[i] = ec.___Schema_description(ctx, field, obj)

		case "types":

			out.Values[i] = ec.___Schema_types(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":

			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":

			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)

		case "subscriptionType":

			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)

		case "directives":

			out.Values[i] = ec.___Schema_directives(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":

			out.Values[i] = ec.___Type_kind(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec.___Type_name(ctx, field, obj)

		case "description":

			out.Values[i] = ec.___Type_description(ctx, field, obj)

		case "fields":

			out.Values[i] = ec.___Type_fields(ctx, field, obj)

		case "interfaces":

			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)

		case "possibleTypes":

			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)

		case "enumValues":

			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)

		case "inputFields":

			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)

		case "ofType":

			out.Values[i] = ec.___Type_ofType(ctx, field, obj)

		case "specifiedByURL":

			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNCalificacionNodeConnection2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐCalificacionNodeConnection(ctx context.Context, sel ast.SelectionSet, v *model.CalificacionNodeConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CalificacionNodeConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNCategoria2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐCategoria(ctx context.Context, sel ast.SelectionSet, v *model.Categoria) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Categoria(ctx, sel, v)
}

func (ec *executionContext) marshalNCategoriaNodeEdge2ᚕᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐCategoriaNodeEdge(ctx context.Context, sel ast.SelectionSet, v []*model.CategoriaNodeEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCategoriaNodeEdge2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐCategoriaNodeEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalNComentarioNodeConnection2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐComentarioNodeConnection(ctx context.Context, sel ast.SelectionSet, v *model.ComentarioNodeConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ComentarioNodeConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNCompannia2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐCompannia(ctx context.Context, sel ast.SelectionSet, v *model.Compannia) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Compannia(ctx, sel, v)
}

func (ec *executionContext) marshalNCompanniaNodeEdge2ᚕᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐCompanniaNodeEdge(ctx context.Context, sel ast.SelectionSet, v []*model.CompanniaNodeEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCompanniaNodeEdge2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐCompanniaNodeEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalNDateTime2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDateTime2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNEmpresa2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐEmpresa(ctx context.Context, sel ast.SelectionSet, v *model.Empresa) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Empresa(ctx, sel, v)
}

func (ec *executionContext) marshalNEmpresaNodeConnection2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐEmpresaNodeConnection(ctx context.Context, sel ast.SelectionSet, v *model.EmpresaNodeConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._EmpresaNodeConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNEmpresaNodeEdge2ᚕᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐEmpresaNodeEdge(ctx context.Context, sel ast.SelectionSet, v []*model.EmpresaNodeEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOEmpresaNodeEdge2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐEmpresaNodeEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloatContext(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNNomencladorProducto2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐNomencladorProducto(ctx context.Context, sel ast.SelectionSet, v *model.NomencladorProducto) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._NomencladorProducto(ctx, sel, v)
}

func (ec *executionContext) marshalNPageInfo2ᚖgithubᚗcomᚋnrftaᚋgoᚑpagingᚐPageInfo(ctx context.Context, sel ast.SelectionSet, v *paging.PageInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PageInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNProducto2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐProducto(ctx context.Context, sel ast.SelectionSet, v *model.Producto) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Producto(ctx, sel, v)
}

func (ec *executionContext) marshalNProductoNodeConnection2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐProductoNodeConnection(ctx context.Context, sel ast.SelectionSet, v *model.ProductoNodeConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ProductoNodeConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNProductoNodeEdge2ᚕᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐProductoNodeEdge(ctx context.Context, sel ast.SelectionSet, v []*model.ProductoNodeEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOProductoNodeEdge2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐProductoNodeEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalNPropiedadProductoNodeConnection2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐPropiedadProductoNodeConnection(ctx context.Context, sel ast.SelectionSet, v *model.PropiedadProductoNodeConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PropiedadProductoNodeConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNPropiedadProductoNodeEdge2ᚕᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐPropiedadProductoNodeEdge(ctx context.Context, sel ast.SelectionSet, v []*model.PropiedadProductoNodeEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPropiedadProductoNodeEdge2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐPropiedadProductoNodeEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalNPropiedadProductoTipo2githubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐPropiedadProductoTipo(ctx context.Context, v interface{}) (model.PropiedadProductoTipo, error) {
	var res model.PropiedadProductoTipo
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPropiedadProductoTipo2githubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐPropiedadProductoTipo(ctx context.Context, sel ast.SelectionSet, v model.PropiedadProductoTipo) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNTipoCategoria2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐTipoCategoria(ctx context.Context, sel ast.SelectionSet, v *model.TipoCategoria) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TipoCategoria(ctx, sel, v)
}

func (ec *executionContext) marshalNUser2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v *model.User) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalNUserNodeConnection2githubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐUserNodeConnection(ctx context.Context, sel ast.SelectionSet, v model.UserNodeConnection) graphql.Marshaler {
	return ec._UserNodeConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserNodeConnection2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐUserNodeConnection(ctx context.Context, sel ast.SelectionSet, v *model.UserNodeConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UserNodeConnection(ctx, sel, v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) marshalOCalificacion2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐCalificacion(ctx context.Context, sel ast.SelectionSet, v *model.Calificacion) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Calificacion(ctx, sel, v)
}

func (ec *executionContext) marshalOCalificacionNodeEdge2ᚕᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐCalificacionNodeEdge(ctx context.Context, sel ast.SelectionSet, v []*model.CalificacionNodeEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCalificacionNodeEdge2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐCalificacionNodeEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCalificacionNodeEdge2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐCalificacionNodeEdge(ctx context.Context, sel ast.SelectionSet, v *model.CalificacionNodeEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CalificacionNodeEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOCategoria2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐCategoria(ctx context.Context, sel ast.SelectionSet, v *model.Categoria) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Categoria(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCategoriaInput2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐCategoriaInput(ctx context.Context, v interface{}) (*model.CategoriaInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCategoriaInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCategoriaNodeConnection2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐCategoriaNodeConnection(ctx context.Context, sel ast.SelectionSet, v *model.CategoriaNodeConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CategoriaNodeConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOCategoriaNodeEdge2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐCategoriaNodeEdge(ctx context.Context, sel ast.SelectionSet, v *model.CategoriaNodeEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CategoriaNodeEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOComentario2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐComentario(ctx context.Context, sel ast.SelectionSet, v *model.Comentario) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Comentario(ctx, sel, v)
}

func (ec *executionContext) marshalOComentarioNodeEdge2ᚕᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐComentarioNodeEdge(ctx context.Context, sel ast.SelectionSet, v []*model.ComentarioNodeEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOComentarioNodeEdge2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐComentarioNodeEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOComentarioNodeEdge2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐComentarioNodeEdge(ctx context.Context, sel ast.SelectionSet, v *model.ComentarioNodeEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ComentarioNodeEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOCompannia2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐCompannia(ctx context.Context, sel ast.SelectionSet, v *model.Compannia) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Compannia(ctx, sel, v)
}

func (ec *executionContext) marshalOCompanniaNodeEdge2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐCompanniaNodeEdge(ctx context.Context, sel ast.SelectionSet, v *model.CompanniaNodeEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CompanniaNodeEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOEmpresa2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐEmpresa(ctx context.Context, sel ast.SelectionSet, v *model.Empresa) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Empresa(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEmpresaInput2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐEmpresaInput(ctx context.Context, v interface{}) (*model.EmpresaInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEmpresaInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEmpresaNodeEdge2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐEmpresaNodeEdge(ctx context.Context, sel ast.SelectionSet, v *model.EmpresaNodeEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EmpresaNodeEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalID(*v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) marshalOMarca2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐMarca(ctx context.Context, sel ast.SelectionSet, v *model.Marca) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Marca(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPageArgs2ᚖgithubᚗcomᚋnrftaᚋgoᚑpagingᚐPageArgs(ctx context.Context, v interface{}) (*paging.PageArgs, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPageArgs(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOProducto2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐProducto(ctx context.Context, sel ast.SelectionSet, v *model.Producto) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Producto(ctx, sel, v)
}

func (ec *executionContext) unmarshalOProductoInput2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐProductoInput(ctx context.Context, v interface{}) (*model.ProductoInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputProductoInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOProductoNodeConnection2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐProductoNodeConnection(ctx context.Context, sel ast.SelectionSet, v *model.ProductoNodeConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProductoNodeConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOProductoNodeEdge2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐProductoNodeEdge(ctx context.Context, sel ast.SelectionSet, v *model.ProductoNodeEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProductoNodeEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOPropiedadProducto2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐPropiedadProducto(ctx context.Context, sel ast.SelectionSet, v *model.PropiedadProducto) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PropiedadProducto(ctx, sel, v)
}

func (ec *executionContext) marshalOPropiedadProductoNodeEdge2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐPropiedadProductoNodeEdge(ctx context.Context, sel ast.SelectionSet, v *model.PropiedadProductoNodeEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PropiedadProductoNodeEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOUser2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v *model.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalOUserNodeEdge2ᚕᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐUserNodeEdge(ctx context.Context, sel ast.SelectionSet, v []*model.UserNodeEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOUserNodeEdge2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐUserNodeEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOUserNodeEdge2ᚖgithubᚗcomᚋsonderkevinᚋgqlᚋgraphᚋmodelᚐUserNodeEdge(ctx context.Context, sel ast.SelectionSet, v *model.UserNodeEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserNodeEdge(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
